// üîî TEST RAPIDE - SYST√àME DE NOTIFICATIONS
// üìÖ Cr√©√© le : 11 Ao√ªt 2025
// üéØ Tester la nouvelle fonctionnalit√© de notifications

const axios = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const path = require('path');

const API_BASE = 'http://localhost:3000/api';

// Comptes de test - avec les bons mots de passe
const testAccounts = {
  doctor: { email: 'dr.pierre.dubois@psl.aphp.fr', password: 'staff123' },
  labStaff: { email: 'tech.monique.leroy@cerba.fr', password: 'staff123' },
  patient: { email: 'franoise.garcia@email.fr', password: 'patient123' }
};

async function testNotifications() {
  console.log('üîî Test du syst√®me de notifications...\n');

  try {
    // 1. Test de sant√© de l'API
    console.log('1Ô∏è‚É£ Test de sant√© de l\'API...');
    const healthResponse = await axios.get(`${API_BASE}/health`);
    console.log(`   ‚úÖ API op√©rationnelle: ${healthResponse.data.message}`);

    // 2. Connexion Patient
    console.log('\n2Ô∏è‚É£ Connexion Patient...');
    const patientLogin = await axios.post(`${API_BASE}/auth/login`, testAccounts.patient);
    const patientToken = patientLogin.data.data.token;
    console.log(`   ‚úÖ Connexion patient r√©ussie: ${patientLogin.data.data.user.first_name} ${patientLogin.data.data.user.last_name}`);

    // 3. Test statistiques notifications (Patient)
    console.log('\n3Ô∏è‚É£ Test statistiques notifications (Patient)...');
    const patientStats = await axios.get(`${API_BASE}/notifications/stats`, {
      headers: { Authorization: `Bearer ${patientToken}` }
    });
    console.log(`   ‚úÖ Statistiques patient:`, patientStats.data.data);

    // 4. Test liste des notifications (Patient)
    console.log('\n4Ô∏è‚É£ Test liste des notifications (Patient)...');
    const patientNotifications = await axios.get(`${API_BASE}/notifications`, {
      headers: { Authorization: `Bearer ${patientToken}` }
    });
    console.log(`   ‚úÖ ${patientNotifications.data.data.notifications.length} notifications trouv√©es`);
    console.log(`   ‚úÖ ${patientNotifications.data.data.unreadCount} notifications non lues`);

    // 5. Test notifications non lues uniquement
    console.log('\n5Ô∏è‚É£ Test notifications non lues (Patient)...');
    const unreadNotifications = await axios.get(`${API_BASE}/notifications/unread`, {
      headers: { Authorization: `Bearer ${patientToken}` }
    });
    console.log(`   ‚úÖ ${unreadNotifications.data.data.notifications.length} notifications non lues`);

    // 6. Test param√®tres de notification
    console.log('\n6Ô∏è‚É£ Test param√®tres de notification (Patient)...');
    const settings = await axios.get(`${API_BASE}/notifications/settings`, {
      headers: { Authorization: `Bearer ${patientToken}` }
    });
    console.log(`   ‚úÖ Param√®tres r√©cup√©r√©s:`, {
      messages: settings.data.data.settings.new_message_enabled,
      documents: settings.data.data.settings.new_document_enabled,
      examens: settings.data.data.settings.exam_status_enabled
    });

    // 7. Test mise √† jour des param√®tres
    console.log('\n7Ô∏è‚É£ Test mise √† jour param√®tres (Patient)...');
    const updatedSettings = await axios.put(`${API_BASE}/notifications/settings`, {
      new_message_enabled: true,
      new_document_enabled: true,
      exam_status_enabled: false, // D√©sactiver les notifications d'examens
      email_enabled: false
    }, {
      headers: { Authorization: `Bearer ${patientToken}` }
    });
    console.log(`   ‚úÖ Param√®tres mis √† jour: examens d√©sactiv√©s`);

    // 8. Marquer une notification comme lue
    if (patientNotifications.data.data.notifications.length > 0) {
      const firstNotification = patientNotifications.data.data.notifications[0];
      if (!firstNotification.is_read) {
        console.log('\n8Ô∏è‚É£ Test marquage notification comme lue...');
        const markRead = await axios.put(`${API_BASE}/notifications/${firstNotification.id}/read`, {}, {
          headers: { Authorization: `Bearer ${patientToken}` }
        });
        console.log(`   ‚úÖ Notification ${firstNotification.id} marqu√©e comme lue`);
      }
    }

    // 9. Connexion M√©decin
    console.log('\n9Ô∏è‚É£ Connexion M√©decin...');
    const doctorLogin = await axios.post(`${API_BASE}/auth/login`, testAccounts.doctor);
    const doctorToken = doctorLogin.data.data.token;
    console.log(`   ‚úÖ Connexion m√©decin r√©ussie: ${doctorLogin.data.data.user.first_name} ${doctorLogin.data.data.user.last_name}`);

    // 10. Test notifications m√©decin
    console.log('\nüîü Test notifications (M√©decin)...');
    const doctorNotifications = await axios.get(`${API_BASE}/notifications`, {
      headers: { Authorization: `Bearer ${doctorToken}` }
    });
    console.log(`   ‚úÖ ${doctorNotifications.data.data.notifications.length} notifications m√©decin`);

    // 11. Test notifications par type
    console.log('\n1Ô∏è‚É£1Ô∏è‚É£ Test notifications par type (exam_results_ready)...');
    const examNotifications = await axios.get(`${API_BASE}/notifications/type/exam_results_ready`, {
      headers: { Authorization: `Bearer ${doctorToken}` }
    });
    console.log(`   ‚úÖ ${examNotifications.data.data.notifications.length} notifications de r√©sultats d'examens`);

    // 12. Connexion Personnel Laboratoire
    console.log('\n1Ô∏è‚É£2Ô∏è‚É£ Connexion Personnel Laboratoire...');
    const labLogin = await axios.post(`${API_BASE}/auth/login`, testAccounts.labStaff);
    const labToken = labLogin.data.data.token;
    console.log(`   ‚úÖ Connexion labo r√©ussie: ${labLogin.data.data.user.first_name} ${labLogin.data.data.user.last_name}`);

    // 13. Test notifications laboratoire
    console.log('\n1Ô∏è‚É£3Ô∏è‚É£ Test notifications (Personnel Labo)...');
    const labNotifications = await axios.get(`${API_BASE}/notifications`, {
      headers: { Authorization: `Bearer ${labToken}` }
    });
    console.log(`   ‚úÖ ${labNotifications.data.data.notifications.length} notifications laboratoire`);

    // 14. Test marquer toutes comme lues
    console.log('\n1Ô∏è‚É£4Ô∏è‚É£ Test marquer toutes notifications comme lues (Patient)...');
    const markAllRead = await axios.put(`${API_BASE}/notifications/read-all`, {}, {
      headers: { Authorization: `Bearer ${patientToken}` }
    });
    console.log(`   ‚úÖ ${markAllRead.data.data.updatedCount} notifications marqu√©es comme lues`);

    // 15. Test cr√©ation automatique de notification (envoyer un message)
    console.log('\n1Ô∏è‚É£5Ô∏è‚É£ Test cr√©ation automatique de notification (nouveau message)...');
    
    // D'abord, r√©cup√©rer les conversations du patient
    const conversations = await axios.get(`${API_BASE}/messages/conversations`, {
      headers: { Authorization: `Bearer ${patientToken}` }
    });
    
    if (conversations.data.data.conversations.length > 0) {
      const conversationId = conversations.data.data.conversations[0].id;
      
      // Envoyer un message (cela devrait cr√©er une notification automatiquement)
      const newMessage = await axios.post(`${API_BASE}/messages/conversations/${conversationId}/messages`, {
        content: 'Test de notification automatique - nouveau message du patient'
      }, {
        headers: { Authorization: `Bearer ${patientToken}` }
      });
      
      console.log(`   ‚úÖ Message envoy√©, notification automatique cr√©√©e`);
      
      // Attendre un peu puis v√©rifier les notifications du m√©decin
      setTimeout(async () => {
        try {
          const updatedDoctorNotifications = await axios.get(`${API_BASE}/notifications/unread`, {
            headers: { Authorization: `Bearer ${doctorToken}` }
          });
          console.log(`   ‚úÖ M√©decin a maintenant ${updatedDoctorNotifications.data.data.notifications.length} notifications non lues`);
        } catch (error) {
          console.log(`   ‚ö†Ô∏è Erreur v√©rification notifications m√©decin:`, error.message);
        }
      }, 1000);
    }

    // 16. Test cr√©ation automatique de notification (upload document)
    console.log('\n1Ô∏è‚É£6Ô∏è‚É£ Test cr√©ation automatique de notification (nouveau document)...');

    try {
      const labPatients = await axios.get(`${API_BASE}/patients/lab`, {
        headers: { Authorization: `Bearer ${labToken}` }
      });

      if (labPatients.data.data.patients.length > 0) {
        const patientId = labPatients.data.data.patients[0].id;
        const testFilePath = path.join(__dirname, 'test_notification_doc.txt');
        fs.writeFileSync(testFilePath, 'Document test pour notifications');

        const form = new FormData();
        form.append('patient_id', patientId);
        form.append('document_type', 'rapport');
        form.append('description', 'Document test notification');
        form.append('file', fs.createReadStream(testFilePath));

        await axios.post(`${API_BASE}/documents/upload`, form, {
          headers: { Authorization: `Bearer ${labToken}`, ...form.getHeaders() }
        });

        fs.unlinkSync(testFilePath);
        console.log('   ‚úÖ Document upload√©, notification automatique cr√©√©e');

        setTimeout(async () => {
          try {
            const updatedPatientNotifications = await axios.get(`${API_BASE}/notifications/unread`, {
              headers: { Authorization: `Bearer ${patientToken}` }
            });
            console.log(`   ‚úÖ Patient a maintenant ${updatedPatientNotifications.data.data.notifications.length} notifications non lues`);
          } catch (error) {
            console.log('   ‚ö†Ô∏è Erreur v√©rification notifications patient:', error.message);
          }
        }, 1000);
      } else {
        console.log('   ‚ö†Ô∏è Aucun patient disponible pour test document');
      }
    } catch (error) {
      console.log('   ‚ö†Ô∏è Erreur upload document:', error.message);
    }

    console.log('\n‚úÖ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS !');
    console.log('\nüìã R√âSUM√â DES FONCTIONNALIT√âS TEST√âES :');
    console.log('   ‚úÖ Statistiques de notifications');
    console.log('   ‚úÖ Liste des notifications avec pagination');
    console.log('   ‚úÖ Notifications non lues uniquement');
    console.log('   ‚úÖ Param√®tres de notification');
    console.log('   ‚úÖ Mise √† jour des param√®tres');
    console.log('   ‚úÖ Marquage comme lu (individuel et global)');
    console.log('   ‚úÖ Notifications par type');
    console.log('   ‚úÖ Notifications par r√¥le (patient, m√©decin, labo)');
    console.log('   ‚úÖ Cr√©ation automatique de notifications (messages & documents)');

    console.log('\nüöÄ LE SYST√àME DE NOTIFICATIONS EST OP√âRATIONNEL !');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.response?.data || error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° SOLUTION: D√©marrez d\'abord le serveur avec:');
      console.log('   cd backend/src');
      console.log('   node app.js');
    }
  }
}

// V√©rifier si le serveur est d√©marr√©
console.log('üîç Test du syst√®me de notifications...');
console.log('üí° Assurez-vous que le serveur tourne sur http://localhost:3000\n');

testNotifications();