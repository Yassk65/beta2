// üîß POST-MIGRATION SECURITY SETUP
// üìÖ Cr√©√© le : 21 Ao√ªt 2025

const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function executePostMigrationSecurity() {
  try {
    console.log('üîê Ex√©cution des fonctionnalit√©s de s√©curit√© post-migration...');

    // Lire le fichier SQL
    const sqlPath = path.join(__dirname, 'prisma', 'post_migration_security.sql');
    const sqlContent = fs.readFileSync(sqlPath, 'utf8');

    // Diviser le contenu en commandes individuelles
    const commands = sqlContent
      .split(/(?:;[\s]*$)/gm)
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));

    let successCount = 0;
    let errorCount = 0;

    for (const command of commands) {
      try {
        if (command.includes('DELIMITER') || command.includes('delimiter')) {
          console.log('‚è≠Ô∏è  Ignoring DELIMITER command (not needed in Prisma)');
          continue;
        }

        console.log(`üìù Ex√©cution: ${command.substring(0, 50)}...`);
        await prisma.$executeRawUnsafe(command);
        successCount++;
        console.log('‚úÖ Succ√®s');
      } catch (error) {
        console.warn(`‚ö†Ô∏è  Erreur (peut √™tre ignor√©e): ${error.message}`);
        errorCount++;
      }
    }

    console.log('\nüìä R√©sultats:');
    console.log(`‚úÖ Commandes r√©ussies: ${successCount}`);
    console.log(`‚ö†Ô∏è  Commandes en erreur: ${errorCount}`);

    // Tester les vues cr√©√©es
    try {
      const auditCount = await prisma.$queryRaw`SELECT COUNT(*) as count FROM security_audit_view`;
      console.log(`‚úÖ Vue security_audit_view cr√©√©e: ${auditCount[0].count} enregistrements`);
    } catch (error) {
      console.log('‚ö†Ô∏è  Vue security_audit_view non disponible:', error.message);
    }

    try {
      const statsCount = await prisma.$queryRaw`SELECT COUNT(*) as count FROM security_stats_view`;
      console.log(`‚úÖ Vue security_stats_view cr√©√©e: ${statsCount[0].count} enregistrements`);
    } catch (error) {
      console.log('‚ö†Ô∏è  Vue security_stats_view non disponible:', error.message);
    }

    console.log('\nüéâ Migration s√©curit√© termin√©e avec succ√®s!');

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration s√©curit√©:', error);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  executePostMigrationSecurity();
}

module.exports = { executePostMigrationSecurity };