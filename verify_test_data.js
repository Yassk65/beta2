// üîç SCRIPT DE V√âRIFICATION DES DONN√âES DE TEST
// üìÖ Cr√©√© le : 11 Ao√ªt 2025
// üéØ V√©rifier que toutes les donn√©es de test ont √©t√© cr√©√©es correctement

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function verifyData() {
  console.log('üîç V√©rification des donn√©es de test...\n');

  try {
    // Compter les utilisateurs par r√¥le
    const userCounts = await prisma.user.groupBy({
      by: ['role'],
      _count: { role: true }
    });

    console.log('üë• UTILISATEURS PAR R√îLE :');
    userCounts.forEach(count => {
      console.log(`   ${count.role}: ${count._count.role}`);
    });

    // Compter les √©tablissements
    const hospitalCount = await prisma.hospital.count();
    const labCount = await prisma.laboratory.count();
    
    console.log('\nüè¢ √âTABLISSEMENTS :');
    console.log(`   H√¥pitaux: ${hospitalCount}`);
    console.log(`   Laboratoires: ${labCount}`);

    // Compter les patients
    const patientCount = await prisma.patient.count();
    console.log(`\nüë• PATIENTS : ${patientCount}`);

    // Compter les documents
    const documentCounts = await prisma.document.groupBy({
      by: ['document_type'],
      _count: { document_type: true }
    });

    console.log('\nüìÑ DOCUMENTS PAR TYPE :');
    documentCounts.forEach(count => {
      console.log(`   ${count.document_type}: ${count._count.document_type}`);
    });

    // Compter les conversations et messages
    const conversationCount = await prisma.conversation.count();
    const messageCount = await prisma.message.count();
    
    console.log('\nüí¨ MESSAGERIE :');
    console.log(`   Conversations: ${conversationCount}`);
    console.log(`   Messages: ${messageCount}`);

    // Lister quelques utilisateurs de test
    console.log('\nüîë COMPTES DE TEST DISPONIBLES :');
    
    const testUsers = await prisma.user.findMany({
      select: {
        email: true,
        role: true,
        first_name: true,
        last_name: true,
        hospital: { select: { name: true } },
        laboratory: { select: { name: true } }
      },
      orderBy: { role: 'asc' }
    });

    testUsers.forEach(user => {
      const establishment = user.hospital?.name || user.laboratory?.name || 'Aucun';
      console.log(`   ${user.role}: ${user.email} (${user.first_name} ${user.last_name}) - ${establishment}`);
    });

    console.log('\nüìã MOTS DE PASSE PAR D√âFAUT :');
    console.log('   Super Admin: admin123');
    console.log('   Admins H√¥pital: hospital123');
    console.log('   Admins Labo: lab123');
    console.log('   Personnel M√©dical: staff123');
    console.log('   Patients: patient123');

    console.log('\n‚úÖ V√©rification termin√©e avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  } finally {
    await prisma.$disconnect();
  }
}

verifyData();