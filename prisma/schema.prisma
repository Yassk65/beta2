// Sch√©ma Prisma MVP ULTRA-SIMPLIFI√â - VERSION CORRIG√âE
// üìÖ Cr√©√© le : 11 Ao√ªt 2025
// üéØ Objectif : MVP r√©aliste avec donn√©es essentielles uniquement
// üîß Fix : Tailles VARCHAR compatibles MySQL (191 max pour index)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// TABLE UTILISATEURS UNIFI√âE - VERSION MVP CORRIG√âE
// ============================================================================

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique @db.VarChar(191)  // 191 pour compatibilit√© MySQL
  password_hash String    @db.VarChar(255)
  first_name    String?   @db.VarChar(100)
  last_name     String?   @db.VarChar(100)
  phone         String?   @db.VarChar(20)
  
  // R√¥le simplifi√©
  role          UserRole  @default(patient)
  
  // R√©f√©rences vers √©tablissements (NULL pour patients et super_admin)
  hospital_id   Int?
  laboratory_id Int?
  
  // Statut de base
  is_active     Boolean   @default(true)
  last_seen     DateTime?
  
  // M√©tadonn√©es
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  
  // Relations essentielles
  hospital                  Hospital?   @relation(fields: [hospital_id], references: [id], onDelete: SetNull)
  laboratory                Laboratory? @relation(fields: [laboratory_id], references: [id], onDelete: SetNull)
  patient                   Patient?
  uploaded_documents        Document[]  @relation("DocumentUploader")
  document_access_logs      DocumentAccess[] @relation("DocumentAccess")
  conversation_participants ConversationParticipant[]
  messages_sent             Message[]
  requested_exams           ExamRequest[] @relation("ExamRequester")
  processed_exams           ExamRequest[] @relation("ExamProcessor")
  notifications             Notification[]
  notification_settings     NotificationSettings?
  
  @@index([email])
  @@index([role])
  @@index([hospital_id])
  @@index([laboratory_id])
  @@map("users")
}

// ============================================================================
// PROFIL PATIENT MINIMAL
// ============================================================================

model Patient {
  id              Int      @id @default(autoincrement())
  user_id         Int      @unique
  date_of_birth   DateTime?
  gender          Gender?
  phone           String?  @db.VarChar(20)
  
  // Relations
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  documents       Document[]
  exam_requests   ExamRequest[]
  medical_chat_sessions MedicalChatSession[]
  
  @@map("patients")
}

// ============================================================================
// √âTABLISSEMENTS SIMPLIFI√âS
// ============================================================================

model Hospital {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(191)  // 191 pour compatibilit√©
  address     String   @db.Text
  city        String   @db.VarChar(100)
  phone       String?  @db.VarChar(20)
  email       String?  @db.VarChar(191)  // 191 pour compatibilit√©
  
  // G√©olocalisation basique
  latitude    Float?
  longitude   Float?
  
  // Statut
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  
  // Relations
  users         User[]
  documents     Document[]
  exam_requests ExamRequest[] @relation("HospitalExamRequests")
  
  @@index([city])
  @@index([is_active])
  @@map("hospitals")
}

model Laboratory {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(191)  // 191 pour compatibilit√©
  address     String   @db.Text
  city        String   @db.VarChar(100)
  phone       String?  @db.VarChar(20)
  email       String?  @db.VarChar(191)  // 191 pour compatibilit√©
  
  // G√©olocalisation basique
  latitude    Float?
  longitude   Float?
  
  // Statut
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  
  // Relations
  users         User[]
  documents     Document[]
  exam_requests ExamRequest[] @relation("LaboratoryExamRequests")
  
  @@index([city])
  @@index([is_active])
  @@map("laboratories")
}

// ============================================================================
// DOCUMENTS M√âDICAUX BASIQUES
// ============================================================================

model Document {
  id                Int         @id @default(autoincrement())
  patient_id        Int
  uploaded_by       Int
  hospital_id       Int?
  laboratory_id     Int?
  
  // Fichier
  filename          String      @db.VarChar(191)  // 191 pour compatibilit√©
  file_path         String      @db.VarChar(500)
  file_size         Int
  secure_filename   String?     @db.VarChar(191)  // Nom chiffr√© pour s√©curit√©
  secure_token      String?     @db.VarChar(191)  // Token d'acc√®s s√©curis√©
  
  // Type de document
  document_type     DocumentType @default(other)
  description       String?     @db.Text
  shared_with       String?     @db.Text  // JSON des IDs utilisateurs autoris√©s
  
  // M√©tadonn√©es
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  
  // Relations
  patient           Patient     @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  uploader          User        @relation("DocumentUploader", fields: [uploaded_by], references: [id], onDelete: Restrict)
  hospital          Hospital?   @relation(fields: [hospital_id], references: [id], onDelete: SetNull)
  laboratory        Laboratory? @relation(fields: [laboratory_id], references: [id], onDelete: SetNull)
  ai_explanation    DocumentAIExplanation?
  access_logs       DocumentAccess[]
  
  @@index([patient_id])
  @@index([document_type])
  @@index([secure_token])
  @@map("documents")
}

// ============================================================================
// NOUVELLES TABLES POUR FONCTIONNALIT√âS AVANC√âES
// ============================================================================

model DocumentAIExplanation {
  id            Int      @id @default(autoincrement())
  document_id   Int      @unique
  explanation   String   @db.Text
  generated_at  DateTime @default(now())
  
  // Relations
  document      Document @relation(fields: [document_id], references: [id], onDelete: Cascade)
  
  @@map("document_ai_explanations")
}

model DocumentAccess {
  id            Int      @id @default(autoincrement())
  document_id   Int
  user_id       Int
  access_type   String   @db.VarChar(20)  // 'view' ou 'download'
  ip_address    String?  @db.VarChar(45)  // IPv4 ou IPv6
  user_agent    String?  @db.Text
  accessed_at   DateTime @default(now())
  
  // Relations
  document      Document @relation(fields: [document_id], references: [id], onDelete: Cascade)
  user          User     @relation("DocumentAccess", fields: [user_id], references: [id], onDelete: Cascade)
  
  @@index([document_id])
  @@index([user_id])
  @@index([accessed_at])
  @@map("document_access_logs")
}

// ============================================================================
// DEMANDES D'EXAMENS DE LABORATOIRE
// ============================================================================

model ExamRequest {
  id              Int           @id @default(autoincrement())
  patient_id      Int
  requested_by    Int           // ID du m√©decin/staff qui demande
  hospital_id     Int           // H√¥pital demandeur
  laboratory_id   Int           // Laboratoire destinataire
  processed_by    Int?          // ID du staff labo qui traite
  
  // Informations de la demande
  exam_type       ExamType
  priority        ExamPriority  @default(normal)
  status          ExamStatus    @default(pending)
  
  // D√©tails cliniques
  clinical_info   String        @db.Text  // Informations cliniques
  requested_tests String        @db.Text  // Tests demand√©s (JSON)
  notes           String?       @db.Text  // Notes additionnelles
  
  // Dates importantes
  requested_at    DateTime      @default(now())
  scheduled_at    DateTime?     // Date pr√©vue de l'examen
  completed_at    DateTime?     // Date de r√©alisation
  results_ready_at DateTime?    // Date des r√©sultats
  
  // M√©tadonn√©es
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  
  // Relations
  patient         Patient       @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  requester       User          @relation("ExamRequester", fields: [requested_by], references: [id], onDelete: Restrict)
  processor       User?         @relation("ExamProcessor", fields: [processed_by], references: [id], onDelete: SetNull)
  hospital        Hospital      @relation("HospitalExamRequests", fields: [hospital_id], references: [id], onDelete: Restrict)
  laboratory      Laboratory    @relation("LaboratoryExamRequests", fields: [laboratory_id], references: [id], onDelete: Restrict)
  status_history  ExamStatusHistory[]
  
  @@index([patient_id])
  @@index([status])
  @@index([requested_at])
  @@index([hospital_id])
  @@index([laboratory_id])
  @@map("exam_requests")
}

model ExamStatusHistory {
  id              Int         @id @default(autoincrement())
  exam_request_id Int
  status          ExamStatus
  changed_by      Int
  notes           String?     @db.Text
  changed_at      DateTime    @default(now())
  
  // Relations
  exam_request    ExamRequest @relation(fields: [exam_request_id], references: [id], onDelete: Cascade)
  
  @@index([exam_request_id])
  @@index([changed_at])
  @@map("exam_status_history")
}

// ============================================================================
// SYST√àME DE NOTIFICATIONS
// ============================================================================

model Notification {
  id              Int               @id @default(autoincrement())
  user_id         Int               // Destinataire de la notification
  type            NotificationType  // Type de notification
  title           String            @db.VarChar(191)
  message         String            @db.Text
  
  // Donn√©es contextuelles (JSON)
  data            String?           @db.Text  // Informations suppl√©mentaires
  
  // R√©f√©rences optionnelles vers les entit√©s li√©es
  related_message_id    Int?        // ID du message li√©
  related_document_id   Int?        // ID du document li√©
  related_exam_id       Int?        // ID de la demande d'examen li√©e
  
  // Statut de la notification
  is_read         Boolean           @default(false)
  is_sent         Boolean           @default(false)  // Pour les notifications push/email
  
  // M√©tadonn√©es
  created_at      DateTime          @default(now())
  read_at         DateTime?         // Date de lecture
  sent_at         DateTime?         // Date d'envoi push/email
  
  // Relations
  user            User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@index([user_id])
  @@index([type])
  @@index([is_read])
  @@index([created_at])
  @@map("notifications")
}

model NotificationSettings {
  id                    Int     @id @default(autoincrement())
  user_id               Int     @unique
  
  // Pr√©f√©rences par type de notification
  new_message_enabled   Boolean @default(true)
  new_document_enabled  Boolean @default(true)
  exam_status_enabled   Boolean @default(true)
  
  // Canaux de notification
  in_app_enabled        Boolean @default(true)
  email_enabled         Boolean @default(true)
  push_enabled          Boolean @default(false)
  
  // Fr√©quence des notifications email
  email_frequency       EmailFrequency @default(immediate)
  
  // Heures de silence (format HH:MM)
  quiet_hours_start     String? @db.VarChar(5)   // Ex: "22:00"
  quiet_hours_end       String? @db.VarChar(5)   // Ex: "08:00"
  
  // M√©tadonn√©es
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  // Relations
  user                  User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@map("notification_settings")
}

// ============================================================================
// MESSAGERIE BASIQUE
// ============================================================================

model Conversation {
  id          Int       @id @default(autoincrement())
  title       String?   @db.VarChar(191)  // 191 pour compatibilit√©
  created_by  Int
  created_at  DateTime  @default(now())
  
  // Relations
  messages    Message[]
  participants ConversationParticipant[]
  
  @@map("conversations")
}

model ConversationParticipant {
  id              Int          @id @default(autoincrement())
  conversation_id Int
  user_id         Int
  joined_at       DateTime     @default(now())
  
  // Relations
  conversation    Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([conversation_id, user_id])
  @@map("conversation_participants")
}

model Message {
  id              Int          @id @default(autoincrement())
  conversation_id Int
  sender_id       Int
  content         String       @db.Text
  created_at      DateTime     @default(now())
  
  // Relations
  conversation    Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  sender          User         @relation(fields: [sender_id], references: [id], onDelete: Cascade)
  
  @@index([conversation_id, created_at])
  @@map("messages")
}

// ============================================================================
// CHAT M√âDICAL AVEC BOT IA
// ============================================================================

model MedicalChatSession {
  id              Int       @id @default(autoincrement())
  patient_id      Int       // Seuls les patients peuvent utiliser le bot m√©dical
  session_title   String?   @db.VarChar(191)  // Titre g√©n√©r√© automatiquement
  
  // Statut de la session
  is_active       Boolean   @default(true)
  
  // M√©tadonn√©es
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  ended_at        DateTime? // Date de fin de session
  
  // Relations
  patient         Patient   @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  messages        MedicalChatMessage[]
  
  @@index([patient_id])
  @@index([created_at])
  @@map("medical_chat_sessions")
}

model MedicalChatMessage {
  id              Int                 @id @default(autoincrement())
  session_id      Int
  sender_type     ChatSenderType      // 'patient' ou 'bot'
  content         String              @db.Text
  
  // M√©tadonn√©es du message bot
  model_used      String?             @db.VarChar(100)  // Mod√®le IA utilis√©
  tokens_used     Int?                // Nombre de tokens consomm√©s
  response_time   Int?                // Temps de r√©ponse en ms
  
  // Contexte m√©dical (pour le bot)
  medical_context String?             @db.Text  // Contexte m√©dical utilis√© (JSON)
  confidence_score Float?             // Score de confiance de la r√©ponse
  
  // M√©tadonn√©es
  created_at      DateTime            @default(now())
  
  // Relations
  session         MedicalChatSession  @relation(fields: [session_id], references: [id], onDelete: Cascade)
  
  @@index([session_id])
  @@index([created_at])
  @@map("medical_chat_messages")
}

// ============================================================================
// ENUMS SIMPLIFI√âS
// ============================================================================

enum UserRole {
  patient
  hospital_staff
  hospital_admin
  lab_staff
  lab_admin
  super_admin
}

enum Gender {
  M
  F
  Other
}

enum DocumentType {
  lab_result
  prescription
  medical_report
  other
}

enum ExamType {
  blood_test
  urine_test
  imaging
  biopsy
  culture
  serology
  biochemistry
  hematology
  immunology
  microbiology
  other
}

enum ExamPriority {
  urgent
  high
  normal
  low
}

enum ExamStatus {
  pending
  accepted
  rejected
  scheduled
  in_progress
  completed
  results_ready
  cancelled
}

enum NotificationType {
  new_message
  new_document
  document_shared
  exam_request_created
  exam_request_updated
  exam_results_ready
  system_alert
  appointment_reminder
}

enum EmailFrequency {
  immediate
  hourly
  daily
  weekly
  never
}

enum ChatSenderType {
  patient
  bot
}

// ============================================================================
// NOTES MVP CORRIG√âES
// ============================================================================

// 1. VARCHAR(191) au lieu de VARCHAR(255) pour compatibilit√© MySQL utf8mb4
// 2. Structure ultra-simplifi√©e pour un d√©ploiement rapide
// 3. G√©olocalisation basique avec Float (pas de PostGIS)
// 4. Messagerie simple sans statuts de lecture
// 5. Documents basiques sans permissions complexes
// 6. Pas de notifications push (√† ajouter plus tard)
// 7. Pas d'examens/rendez-vous (√† ajouter plus tard)