generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password_hash String    @db.VarChar(255)
  first_name    String?   @db.VarChar(100)
  last_name     String?   @db.VarChar(100)
  phone         String?   @db.VarChar(20)
  role          UserRole  @default(patient)
  hospital_id   Int?
  laboratory_id Int?
  is_active     Boolean   @default(true)
  last_seen     DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relations
  hospital                  Hospital?   @relation(fields: [hospital_id], references: [id], onDelete: SetNull)
  laboratory                Laboratory? @relation(fields: [laboratory_id], references: [id], onDelete: SetNull)
  patient                   Patient?
  uploaded_documents        Document[]  @relation("DocumentUploader")
  document_access_logs      DocumentAccess[] @relation("DocumentAccess")
  document_access_history   DocumentAccessLogs[] @relation("DocumentAccessLogs")
  document_sessions         DocumentSessions[] @relation("DocumentSessions")
  messages_sent             Message[]
  conversation_participants ConversationParticipant[]
  requested_exams           ExamRequest[] @relation("ExamRequester")
  processed_exams           ExamRequest[] @relation("ExamProcessor")
  notifications             Notification[]
  notification_settings     NotificationSettings?

  @@index([email])
  @@index([role])
  @@index([hospital_id])
  @@index([laboratory_id])
  @@map("users")
}

model Patient {
  id            Int       @id @default(autoincrement())
  user_id       Int       @unique
  date_of_birth DateTime?
  gender        Gender?
  phone         String?   @db.VarChar(20)

  // Relations
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  documents     Document[]
  exam_requests ExamRequest[]
  medical_chat_sessions MedicalChatSession[]

  @@map("patients")
}

model Hospital {
  id         Int      @id @default(autoincrement())
  name       String
  address    String   @db.Text
  city       String   @db.VarChar(100)
  phone      String?  @db.VarChar(20)
  email      String?
  latitude   Float?
  longitude  Float?
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())

  // Relations
  users         User[]
  documents     Document[]
  exam_requests ExamRequest[] @relation("HospitalExamRequests")

  @@index([city])
  @@index([is_active])
  @@map("hospitals")
}

model Laboratory {
  id         Int      @id @default(autoincrement())
  name       String
  address    String   @db.Text
  city       String   @db.VarChar(100)
  phone      String?  @db.VarChar(20)
  email      String?
  latitude   Float?
  longitude  Float?
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())

  // Relations
  users         User[]
  documents     Document[]
  exam_requests ExamRequest[] @relation("LaboratoryExamRequests")

  @@index([city])
  @@index([is_active])
  @@map("laboratories")
}

model Document {
  id              Int          @id @default(autoincrement())
  patient_id      Int
  uploaded_by     Int
  hospital_id     Int?
  laboratory_id   Int?
  filename        String
  file_path       String       @db.VarChar(500)
  file_size       Int
  secure_filename String?
  secure_token    String?
  document_type   DocumentType @default(other)
  description     String?      @db.Text
  shared_with     String?      @db.Text
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt

  // Relations
  patient           Patient     @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  uploader          User        @relation("DocumentUploader", fields: [uploaded_by], references: [id], onDelete: Restrict)
  hospital          Hospital?   @relation(fields: [hospital_id], references: [id], onDelete: SetNull)
  laboratory        Laboratory? @relation(fields: [laboratory_id], references: [id], onDelete: SetNull)
  ai_explanation    DocumentAIExplanation?
  access_logs       DocumentAccess[]
  access_history    DocumentAccessLogs[] @relation("DocumentAccessLogs")
  sessions          DocumentSessions[]

  @@index([patient_id])
  @@index([document_type])
  @@index([secure_token])
  @@index([hospital_id], map: "documents_hospital_id_fkey")
  @@index([laboratory_id], map: "documents_laboratory_id_fkey")
  @@index([uploaded_by], map: "documents_uploaded_by_fkey")
  @@map("documents")
}

model DocumentAIExplanation {
  id           Int      @id @default(autoincrement())
  document_id  Int      @unique
  explanation  String   @db.Text
  generated_at DateTime @default(now())

  // Relations
  document     Document @relation(fields: [document_id], references: [id], onDelete: Cascade)

  @@map("document_ai_explanations")
}

model DocumentAccess {
  id                 Int      @id @default(autoincrement())
  document_id        Int
  user_id            Int
  access_type        String   @default("view") @db.VarChar(20)
  ip_address         String?  @db.VarChar(45)
  user_agent         String?  @db.Text
  is_offline_attempt Boolean  @default(false)
  created_at         DateTime @default(now())

  // Relations
  document           Document @relation(fields: [document_id], references: [id], onDelete: Cascade)
  user               User     @relation("DocumentAccess", fields: [user_id], references: [id], onDelete: Cascade)

  @@index([document_id])
  @@index([user_id])
  @@index([created_at])
  @@index([is_offline_attempt])
  @@index([user_id, document_id, created_at])
  @@map("document_access")
}

model DocumentAccessLogs {
  id          Int      @id @default(autoincrement())
  document_id Int
  user_id     Int
  access_type String   @db.VarChar(20)
  ip_address  String?  @db.VarChar(45)
  user_agent  String?  @db.Text
  accessed_at DateTime @default(now())

  // Relations
  document    Document @relation("DocumentAccessLogs", fields: [document_id], references: [id], onDelete: Cascade)
  user        User     @relation("DocumentAccessLogs", fields: [user_id], references: [id], onDelete: Cascade)

  @@index([document_id])
  @@index([user_id])
  @@index([accessed_at])
  @@map("document_access_logs")
}

model DocumentSessions {
  id            Int      @id @default(autoincrement())
  document_id   Int
  user_id       Int
  session_token String   @db.VarChar(64)
  expires_at    DateTime
  ip_address    String?  @db.VarChar(45)
  user_agent    String?  @db.Text
  created_at    DateTime @default(now())

  // Relations
  document      Document @relation(fields: [document_id], references: [id], onDelete: Cascade)
  user          User     @relation("DocumentSessions", fields: [user_id], references: [id], onDelete: Cascade)

  @@index([document_id])
  @@index([user_id])
  @@index([session_token])
  @@index([expires_at])
  @@map("document_sessions")
}

model ExamRequest {
  id               Int          @id @default(autoincrement())
  patient_id       Int
  requested_by     Int
  hospital_id      Int
  laboratory_id    Int
  processed_by     Int?
  exam_type        ExamType
  priority         ExamPriority @default(normal)
  status           ExamStatus   @default(pending)
  clinical_info    String       @db.Text
  requested_tests  String       @db.Text
  notes            String?      @db.Text
  requested_at     DateTime     @default(now())
  scheduled_at     DateTime?
  completed_at     DateTime?
  results_ready_at DateTime?
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt

  // Relations
  patient         Patient       @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  requester       User          @relation("ExamRequester", fields: [requested_by], references: [id], onDelete: Restrict)
  processor       User?         @relation("ExamProcessor", fields: [processed_by], references: [id], onDelete: SetNull)
  hospital        Hospital      @relation("HospitalExamRequests", fields: [hospital_id], references: [id], onDelete: Restrict)
  laboratory      Laboratory    @relation("LaboratoryExamRequests", fields: [laboratory_id], references: [id], onDelete: Restrict)
  status_history  ExamStatusHistory[]

  @@index([patient_id])
  @@index([status])
  @@index([requested_at])
  @@index([hospital_id])
  @@index([laboratory_id])
  @@index([processed_by], map: "exam_requests_processed_by_fkey")
  @@index([requested_by], map: "exam_requests_requested_by_fkey")
  @@map("exam_requests")
}

model ExamStatusHistory {
  id              Int        @id @default(autoincrement())
  exam_request_id Int
  status          ExamStatus
  changed_by      Int
  notes           String?    @db.Text
  changed_at      DateTime   @default(now())

  // Relations
  exam_request    ExamRequest @relation(fields: [exam_request_id], references: [id], onDelete: Cascade)

  @@index([exam_request_id])
  @@index([changed_at])
  @@map("exam_status_history")
}

model Notification {
  id                  Int              @id @default(autoincrement())
  user_id             Int
  type                NotificationType
  title               String
  message             String           @db.Text
  data                String?          @db.Text
  related_message_id  Int?
  related_document_id Int?
  related_exam_id     Int?
  is_read             Boolean          @default(false)
  is_sent             Boolean          @default(false)
  created_at          DateTime         @default(now())
  read_at             DateTime?
  sent_at             DateTime?

  // Relations
  user                User             @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([type])
  @@index([is_read])
  @@index([created_at])
  @@map("notifications")
}

model NotificationSettings {
  id                   Int            @id @default(autoincrement())
  user_id              Int            @unique
  new_message_enabled  Boolean        @default(true)
  new_document_enabled Boolean        @default(true)
  exam_status_enabled  Boolean        @default(true)
  in_app_enabled       Boolean        @default(true)
  email_enabled        Boolean        @default(true)
  push_enabled         Boolean        @default(false)
  email_frequency      EmailFrequency @default(immediate)
  quiet_hours_start    String?        @db.VarChar(5)
  quiet_hours_end      String?        @db.VarChar(5)
  created_at           DateTime       @default(now())
  updated_at           DateTime       @updatedAt

  // Relations
  user                 User           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

model Conversation {
  id         Int      @id @default(autoincrement())
  title      String?
  created_by Int
  created_at DateTime @default(now())

  // Relations
  messages    Message[]
  participants ConversationParticipant[]

  @@map("conversations")
}

model ConversationParticipant {
  id              Int      @id @default(autoincrement())
  conversation_id Int
  user_id         Int
  joined_at       DateTime @default(now())

  // Relations
  conversation    Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([conversation_id, user_id])
  @@index([user_id], map: "conversation_participants_user_id_fkey")
  @@map("conversation_participants")
}

model Message {
  id              Int      @id @default(autoincrement())
  conversation_id Int
  sender_id       Int
  content         String   @db.Text
  created_at      DateTime @default(now())

  // Relations
  conversation    Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  sender          User         @relation(fields: [sender_id], references: [id], onDelete: Cascade)

  @@index([conversation_id, created_at])
  @@index([sender_id], map: "messages_sender_id_fkey")
  @@map("messages")
}

model MedicalChatSession {
  id            Int       @id @default(autoincrement())
  patient_id    Int
  session_title String?
  is_active     Boolean   @default(true)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  ended_at      DateTime?

  // Relations
  patient       Patient   @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  messages      MedicalChatMessage[]

  @@index([patient_id])
  @@index([created_at])
  @@map("medical_chat_sessions")
}

model MedicalChatMessage {
  id               Int            @id @default(autoincrement())
  session_id       Int
  sender_type      ChatSenderType
  content          String         @db.Text
  model_used       String?        @db.VarChar(100)
  tokens_used      Int?
  response_time    Int?
  medical_context  String?        @db.Text
  confidence_score Float?
  created_at       DateTime       @default(now())

  // Relations
  session          MedicalChatSession @relation(fields: [session_id], references: [id], onDelete: Cascade)

  @@index([session_id])
  @@index([created_at])
  @@map("medical_chat_messages")
}

enum UserRole {
  patient
  hospital_staff
  hospital_admin
  lab_staff
  lab_admin
  super_admin
}

enum Gender {
  M
  F
  Other
}

enum DocumentType {
  lab_result
  prescription
  medical_report
  other
}

enum ExamType {
  blood_test
  urine_test
  imaging
  biopsy
  culture
  serology
  biochemistry
  hematology
  immunology
  microbiology
  other
}

enum ExamPriority {
  urgent
  high
  normal
  low
}

enum ExamStatus {
  pending
  accepted
  rejected
  scheduled
  in_progress
  completed
  results_ready
  cancelled
}

enum NotificationType {
  new_message
  new_document
  document_shared
  exam_request_created
  exam_request_updated
  exam_results_ready
  system_alert
  appointment_reminder
}

enum EmailFrequency {
  immediate
  hourly
  daily
  weekly
  never
}

enum ChatSenderType {
  patient
  bot
}
