// üîç V√âRIFICATION COMPL√àTE DU BACKEND
// üìÖ Cr√©√© le : 11 Ao√ªt 2025
// üéØ V√©rifier tous les aspects de la logique backend

const { PrismaClient } = require('@prisma/client');
const fs = require('fs').promises;
const path = require('path');

const prisma = new PrismaClient();

async function checkBackend() {
  console.log('üîç V√âRIFICATION COMPL√àTE DU BACKEND\n');
  console.log('=' .repeat(50));

  let checks = {
    database: { passed: 0, total: 0 },
    files: { passed: 0, total: 0 },
    data: { passed: 0, total: 0 },
    permissions: { passed: 0, total: 0 }
  };

  try {
    // ============================================================================
    // 1. V√âRIFICATION DE LA BASE DE DONN√âES
    // ============================================================================
    
    console.log('\nüìä 1. V√âRIFICATION BASE DE DONN√âES');
    console.log('-'.repeat(40));

    // Test connexion
    checks.database.total++;
    try {
      await prisma.$connect();
      console.log('‚úÖ Connexion √† la base de donn√©es');
      checks.database.passed++;
    } catch (error) {
      console.log('‚ùå Connexion √† la base de donn√©es');
    }

    // V√©rifier les tables principales
    const tables = [
      'users', 'patients', 'hospitals', 'laboratories', 
      'documents', 'exam_requests', 'notifications', 
      'conversations', 'messages'
    ];

    for (const table of tables) {
      checks.database.total++;
      try {
        const count = await prisma[table.slice(0, -1) === 'users' ? 'user' : 
                                table.slice(0, -1) === 'laboratories' ? 'laboratory' :
                                table.slice(0, -1)].count();
        console.log(`‚úÖ Table ${table}: ${count} enregistrements`);
        checks.database.passed++;
      } catch (error) {
        console.log(`‚ùå Table ${table}: Erreur`);
      }
    }

    // ============================================================================
    // 2. V√âRIFICATION DES FICHIERS
    // ============================================================================
    
    console.log('\nüìÅ 2. V√âRIFICATION FICHIERS');
    console.log('-'.repeat(40));

    const requiredFiles = [
      // Contr√¥leurs
      'src/controllers/authController.js',
      'src/controllers/userController.js',
      'src/controllers/patientAdminController.js',
      'src/controllers/documentController.js',
      'src/controllers/examRequestController.js',
      'src/controllers/messageController.js',
      'src/controllers/notificationController.js',
      
      // Routes
      'src/routes/auth.js',
      'src/routes/users.js',
      'src/routes/adminPatients.js',
      'src/routes/documents.js',
      'src/routes/examRequests.js',
      'src/routes/messages.js',
      'src/routes/notifications.js',
      
      // Services
      'src/services/notificationService.js',
      
      // Middleware
      'src/middleware/auth.js',
      
      // Configuration
      'src/app.js',
      'prisma/schema.prisma',
      'prisma/seed.js'
    ];

    for (const file of requiredFiles) {
      checks.files.total++;
      try {
        await fs.access(path.join(__dirname, file));
        console.log(`‚úÖ ${file}`);
        checks.files.passed++;
      } catch (error) {
        console.log(`‚ùå ${file} - MANQUANT`);
      }
    }

    // ============================================================================
    // 3. V√âRIFICATION DES DONN√âES
    // ============================================================================
    
    console.log('\nüìä 3. V√âRIFICATION DONN√âES');
    console.log('-'.repeat(40));

    // V√©rifier les utilisateurs par r√¥le
    const usersByRole = await prisma.user.groupBy({
      by: ['role'],
      _count: { role: true }
    });

    const expectedRoles = ['super_admin', 'hospital_admin', 'lab_admin', 'hospital_staff', 'lab_staff', 'patient'];
    for (const role of expectedRoles) {
      checks.data.total++;
      const roleData = usersByRole.find(r => r.role === role);
      if (roleData && roleData._count.role > 0) {
        console.log(`‚úÖ R√¥le ${role}: ${roleData._count.role} utilisateurs`);
        checks.data.passed++;
      } else {
        console.log(`‚ùå R√¥le ${role}: Aucun utilisateur`);
      }
    }

    // V√©rifier les √©tablissements
    checks.data.total++;
    const hospitalCount = await prisma.hospital.count();
    if (hospitalCount >= 3) {
      console.log(`‚úÖ H√¥pitaux: ${hospitalCount}`);
      checks.data.passed++;
    } else {
      console.log(`‚ùå H√¥pitaux: ${hospitalCount} (minimum 3 attendu)`);
    }

    checks.data.total++;
    const labCount = await prisma.laboratory.count();
    if (labCount >= 3) {
      console.log(`‚úÖ Laboratoires: ${labCount}`);
      checks.data.passed++;
    } else {
      console.log(`‚ùå Laboratoires: ${labCount} (minimum 3 attendu)`);
    }

    // V√©rifier les documents
    checks.data.total++;
    const documentCount = await prisma.document.count();
    if (documentCount >= 5) {
      console.log(`‚úÖ Documents: ${documentCount}`);
      checks.data.passed++;
    } else {
      console.log(`‚ùå Documents: ${documentCount} (minimum 5 attendu)`);
    }

    // V√©rifier les demandes d'examens
    checks.data.total++;
    const examCount = await prisma.examRequest.count();
    if (examCount >= 3) {
      console.log(`‚úÖ Demandes d'examens: ${examCount}`);
      checks.data.passed++;
    } else {
      console.log(`‚ùå Demandes d'examens: ${examCount} (minimum 3 attendu)`);
    }

    // V√©rifier les notifications
    checks.data.total++;
    const notificationCount = await prisma.notification.count();
    if (notificationCount >= 3) {
      console.log(`‚úÖ Notifications: ${notificationCount}`);
      checks.data.passed++;
    } else {
      console.log(`‚ùå Notifications: ${notificationCount} (minimum 3 attendu)`);
    }

    // ============================================================================
    // 4. V√âRIFICATION DES PERMISSIONS
    // ============================================================================
    
    console.log('\nüîê 4. V√âRIFICATION PERMISSIONS');
    console.log('-'.repeat(40));

    // V√©rifier qu'il y a des utilisateurs de chaque r√¥le avec des √©tablissements
    checks.permissions.total++;
    const hospitalStaff = await prisma.user.findFirst({
      where: { role: 'hospital_staff', hospital_id: { not: null } }
    });
    if (hospitalStaff) {
      console.log(`‚úÖ Personnel hospitalier avec √©tablissement assign√©`);
      checks.permissions.passed++;
    } else {
      console.log(`‚ùå Aucun personnel hospitalier avec √©tablissement`);
    }

    checks.permissions.total++;
    const labStaff = await prisma.user.findFirst({
      where: { role: 'lab_staff', laboratory_id: { not: null } }
    });
    if (labStaff) {
      console.log(`‚úÖ Personnel laboratoire avec √©tablissement assign√©`);
      checks.permissions.passed++;
    } else {
      console.log(`‚ùå Aucun personnel laboratoire avec √©tablissement`);
    }

    checks.permissions.total++;
    const patientsWithEstablishments = await prisma.user.count({
      where: { 
        role: 'patient', 
        OR: [
          { hospital_id: { not: null } },
          { laboratory_id: { not: null } }
        ]
      }
    });
    if (patientsWithEstablishments >= 3) {
      console.log(`‚úÖ ${patientsWithEstablishments} patients avec √©tablissements assign√©s`);
      checks.permissions.passed++;
    } else {
      console.log(`‚ùå ${patientsWithEstablishments} patients avec √©tablissements (minimum 3 attendu)`);
    }

    // V√©rifier les relations documents-patients
    checks.permissions.total++;
    const documentsWithPatients = await prisma.document.count({
      where: { patient_id: { not: null } }
    });
    const totalDocuments = await prisma.document.count();
    if (documentsWithPatients === totalDocuments && totalDocuments > 0) {
      console.log(`‚úÖ Tous les documents ont un patient assign√©`);
      checks.permissions.passed++;
    } else {
      console.log(`‚ùå ${documentsWithPatients}/${totalDocuments} documents avec patient`);
    }

    // ============================================================================
    // 5. R√âSUM√â FINAL
    // ============================================================================
    
    console.log('\nüìã R√âSUM√â DE LA V√âRIFICATION');
    console.log('=' .repeat(50));

    const totalChecks = Object.values(checks).reduce((sum, category) => sum + category.total, 0);
    const passedChecks = Object.values(checks).reduce((sum, category) => sum + category.passed, 0);
    const successRate = Math.round((passedChecks / totalChecks) * 100);

    console.log(`üìä Base de donn√©es: ${checks.database.passed}/${checks.database.total} ‚úÖ`);
    console.log(`üìÅ Fichiers: ${checks.files.passed}/${checks.files.total} ‚úÖ`);
    console.log(`üìä Donn√©es: ${checks.data.passed}/${checks.data.total} ‚úÖ`);
    console.log(`üîê Permissions: ${checks.permissions.passed}/${checks.permissions.total} ‚úÖ`);
    
    console.log('\n' + '='.repeat(50));
    console.log(`üéØ R√âSULTAT GLOBAL: ${passedChecks}/${totalChecks} (${successRate}%)`);
    
    if (successRate >= 95) {
      console.log('üéâ BACKEND VALID√â - PR√äT POUR LA PRODUCTION ! üöÄ');
    } else if (successRate >= 80) {
      console.log('‚ö†Ô∏è BACKEND FONCTIONNEL - Quelques am√©liorations recommand√©es');
    } else {
      console.log('‚ùå BACKEND INCOMPLET - Corrections n√©cessaires');
    }

    // Recommandations
    console.log('\nüí° RECOMMANDATIONS:');
    if (checks.files.passed < checks.files.total) {
      console.log('   üìÅ V√©rifier les fichiers manquants');
    }
    if (checks.data.passed < checks.data.total) {
      console.log('   üìä Ex√©cuter: npm run db:seed');
    }
    if (checks.permissions.passed < checks.permissions.total) {
      console.log('   üîê V√©rifier les assignations d\'√©tablissements');
    }

    console.log('\nüöÄ COMMANDES UTILES:');
    console.log('   npm run db:push      # Mettre √† jour la base');
    console.log('   npm run db:seed      # Ajouter les donn√©es de test');
    console.log('   npm run test:api     # Tester l\'API compl√®te');
    console.log('   cd src && node app.js # D√©marrer le serveur');

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkBackend();