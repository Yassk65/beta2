// ============================================================================
// SERVICE OPENROUTER - CHAT M√âDICAL IA
// ============================================================================
// üéØ Service pour interagir avec OpenRouter et les mod√®les IA m√©dicaux
// üìÖ Cr√©√© le : 12 Ao√ªt 2025

const axios = require('axios');

class OpenRouterService {
  constructor() {
    this.apiKey = process.env.OPENROUTER_API_KEY;
    this.baseURL = 'https://openrouter.ai/api/v1';
    this.defaultModel = 'microsoft/wizardlm-2-8x22b'; // Mod√®le m√©dical recommand√©
    
    if (!this.apiKey) {
      throw new Error('OPENROUTER_API_KEY manquante dans les variables d\'environnement');
    }
  }

  /**
   * G√©n√®re une r√©ponse m√©dicale contextuelle
   * @param {string} userMessage - Message du patient
   * @param {Array} conversationHistory - Historique de la conversation
   * @param {Object} medicalContext - Contexte m√©dical du patient
   * @returns {Object} R√©ponse avec contenu, m√©tadonn√©es et contexte
   */
  async generateMedicalResponse(userMessage, conversationHistory = [], medicalContext = {}) {
    try {
      const startTime = Date.now();
      
      // Construction du prompt syst√®me m√©dical
      const systemPrompt = this.buildMedicalSystemPrompt(medicalContext);
      
      // Construction des messages pour l'IA
      const messages = this.buildConversationMessages(systemPrompt, conversationHistory, userMessage);
      
      // Appel √† OpenRouter
      const response = await axios.post(
        `${this.baseURL}/chat/completions`,
        {
          model: this.defaultModel,
          messages: messages,
          max_tokens: 1000,
          temperature: 0.3, // Temp√©rature basse pour plus de pr√©cision m√©dicale
          top_p: 0.9,
          frequency_penalty: 0.1,
          presence_penalty: 0.1
        },
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json',
            'HTTP-Referer': 'http://localhost:3002', // Requis par OpenRouter
            'X-Title': 'Assistant M√©dical MVP'
          },
          timeout: 30000 // 30 secondes de timeout
        }
      );

      const endTime = Date.now();
      const responseTime = endTime - startTime;

      // Extraction de la r√©ponse
      const aiResponse = response.data.choices[0].message.content;
      const tokensUsed = response.data.usage?.total_tokens || 0;

      // Calcul du score de confiance bas√© sur la longueur et la coh√©rence
      const confidenceScore = this.calculateConfidenceScore(aiResponse, userMessage);

      return {
        success: true,
        content: aiResponse,
        metadata: {
          model: this.defaultModel,
          tokensUsed: tokensUsed,
          responseTime: responseTime,
          confidenceScore: confidenceScore
        },
        medicalContext: {
          contextUsed: medicalContext,
          disclaimerShown: true
        }
      };

    } catch (error) {
      console.error('Erreur OpenRouter:', error.response?.data || error.message);
      
      return {
        success: false,
        content: this.getFallbackResponse(userMessage),
        error: error.message,
        metadata: {
          model: 'fallback',
          tokensUsed: 0,
          responseTime: 0,
          confidenceScore: 0.1
        }
      };
    }
  }

  /**
   * Construit le prompt syst√®me m√©dical avec contexte
   */
  buildMedicalSystemPrompt(medicalContext) {
    const basePrompt = `Tu es un assistant m√©dical IA sp√©cialis√© dans l'aide aux patients. 

R√àGLES IMPORTANTES :
1. Tu n'es PAS un m√©decin et ne peux pas remplacer une consultation m√©dicale
2. Toujours recommander de consulter un professionnel de sant√© pour un diagnostic
3. Fournir des informations g√©n√©rales et √©ducatives uniquement
4. √ätre empathique et rassurant tout en restant factuel
5. Utiliser un langage simple et accessible
6. Toujours inclure un disclaimer m√©dical dans tes r√©ponses

CONTEXTE PATIENT :`;

    // Ajout du contexte m√©dical si disponible
    if (medicalContext.age) {
      basePrompt += `\n- √Çge : ${medicalContext.age} ans`;
    }
    if (medicalContext.gender) {
      basePrompt += `\n- Genre : ${medicalContext.gender}`;
    }
    if (medicalContext.recentDocuments) {
      basePrompt += `\n- Documents r√©cents : ${medicalContext.recentDocuments.length} document(s)`;
    }
    if (medicalContext.recentExams) {
      basePrompt += `\n- Examens r√©cents : ${medicalContext.recentExams.length} examen(s)`;
    }

    return basePrompt + `\n\nR√©ponds en fran√ßais de mani√®re claire et bienveillante.`;
  }

  /**
   * Construit les messages de conversation pour l'IA
   */
  buildConversationMessages(systemPrompt, history, currentMessage) {
    const messages = [
      { role: 'system', content: systemPrompt }
    ];

    // Ajout de l'historique (limit√© aux 10 derniers messages)
    const recentHistory = history.slice(-10);
    recentHistory.forEach(msg => {
      messages.push({
        role: msg.sender_type === 'patient' ? 'user' : 'assistant',
        content: msg.content
      });
    });

    // Ajout du message actuel
    messages.push({
      role: 'user',
      content: currentMessage
    });

    return messages;
  }

  /**
   * Calcule un score de confiance basique
   */
  calculateConfidenceScore(response, userMessage) {
    let score = 0.5; // Score de base

    // Facteurs positifs
    if (response.length > 100) score += 0.1; // R√©ponse d√©taill√©e
    if (response.includes('m√©decin') || response.includes('professionnel')) score += 0.2; // Recommande consultation
    if (response.includes('disclaimer') || response.includes('information g√©n√©rale')) score += 0.1; // Disclaimer pr√©sent
    
    // Facteurs n√©gatifs
    if (response.length < 50) score -= 0.2; // R√©ponse trop courte
    if (response.includes('diagnostic') && !response.includes('consulter')) score -= 0.3; // Diagnostic sans recommandation

    return Math.max(0.1, Math.min(1.0, score)); // Entre 0.1 et 1.0
  }

  /**
   * R√©ponse de fallback en cas d'erreur
   */
  getFallbackResponse(userMessage) {
    return `Je suis d√©sol√©, je rencontre actuellement des difficult√©s techniques pour traiter votre demande. 

Pour toute question m√©dicale, je vous recommande vivement de :
- Consulter votre m√©decin traitant
- Contacter votre √©tablissement de sant√©
- En cas d'urgence, appeler le 15 (SAMU)

Votre sant√© est importante, n'h√©sitez pas √† consulter un professionnel de sant√© qualifi√©.

‚ö†Ô∏è Disclaimer : Cet assistant ne remplace en aucun cas une consultation m√©dicale professionnelle.`;
  }

  /**
   * G√©n√®re un titre automatique pour la session de chat
   */
  async generateSessionTitle(firstMessage) {
    try {
      const response = await axios.post(
        `${this.baseURL}/chat/completions`,
        {
          model: 'openai/gpt-3.5-turbo',
          messages: [
            {
              role: 'system',
              content: 'G√©n√®re un titre court (max 50 caract√®res) pour cette conversation m√©dicale. R√©ponds uniquement avec le titre, sans guillemets.'
            },
            {
              role: 'user',
              content: firstMessage
            }
          ],
          max_tokens: 20,
          temperature: 0.5
        },
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json',
            'HTTP-Referer': 'http://localhost:3002',
            'X-Title': 'Assistant M√©dical MVP'
          }
        }
      );

      return response.data.choices[0].message.content.trim();
    } catch (error) {
      // Titre par d√©faut en cas d'erreur
      return `Consultation du ${new Date().toLocaleDateString('fr-FR')}`;
    }
  }

  /**
   * V√©rifie la disponibilit√© du service OpenRouter
   */
  async checkHealth() {
    try {
      const response = await axios.get(`${this.baseURL}/models`, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`
        },
        timeout: 5000
      });
      
      return {
        status: 'healthy',
        modelsAvailable: response.data.data?.length || 0
      };
    } catch (error) {
      return {
        status: 'unhealthy',
        error: error.message
      };
    }
  }
}

module.exports = new OpenRouterService();