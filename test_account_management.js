#!/usr/bin/env node

/**
 * üß™ SCRIPT DE TEST - FONCTIONNALIT√âS GESTION DE COMPTE
 * 
 * Ce script teste tous les endpoints de gestion de compte utilisateur
 */

const https = require('https');
const http = require('http');

const API_BASE = 'http://localhost:3000/api';

// Configuration du test
const testConfig = {
  email: 'test.patient@example.com',
  password: 'TestPassword123',
  newPassword: 'NewTestPassword123'
};

// Stockage du token pour les tests
let authToken = '';
let userId = null;

// ============================================================================
// FONCTIONS UTILITAIRES
// ============================================================================

/**
 * Faire une requ√™te HTTP
 */
function makeRequest(options, data = null) {
  return new Promise((resolve, reject) => {
    const protocol = options.hostname === 'localhost' ? http : https;
    
    const req = protocol.request(options, (res) => {
      let body = '';
      res.on('data', chunk => body += chunk);
      res.on('end', () => {
        try {
          const response = JSON.parse(body);
          resolve({ status: res.statusCode, data: response });
        } catch (error) {
          resolve({ status: res.statusCode, data: body });
        }
      });
    });

    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

/**
 * Cr√©er les options de requ√™te
 */
function createRequestOptions(method, path, requiresAuth = true) {
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: `/api${path}`,
    method,
    headers: {
      'Content-Type': 'application/json'
    }
  };

  if (requiresAuth && authToken) {
    options.headers['Authorization'] = `Bearer ${authToken}`;
  }

  return options;
}

/**
 * Afficher le r√©sultat d'un test
 */
function logTestResult(testName, success, message, data = null) {
  const icon = success ? '‚úÖ' : '‚ùå';
  console.log(`${icon} ${testName}: ${message}`);
  if (data && process.env.VERBOSE) {
    console.log('   Data:', JSON.stringify(data, null, 2));
  }
}

// ============================================================================
// TESTS D'AUTHENTIFICATION
// ============================================================================

/**
 * Test de connexion
 */
async function testLogin() {
  console.log('\nüîë Test de connexion...');
  
  try {
    const options = createRequestOptions('POST', '/auth/login', false);
    const loginData = {
      email: testConfig.email,
      password: testConfig.password
    };

    const result = await makeRequest(options, loginData);
    
    if (result.status === 200 && result.data.success) {
      authToken = result.data.data.token;
      userId = result.data.data.user.id;
      logTestResult('Connexion', true, 'Connexion r√©ussie');
      return true;
    } else {
      logTestResult('Connexion', false, result.data.message || '√âchec de connexion');
      return false;
    }
  } catch (error) {
    logTestResult('Connexion', false, `Erreur: ${error.message}`);
    return false;
  }
}

/**
 * Test de r√©cup√©ration du profil
 */
async function testGetProfile() {
  console.log('\nüë§ Test de r√©cup√©ration du profil...');
  
  try {
    const options = createRequestOptions('GET', '/auth/profile');
    const result = await makeRequest(options);
    
    if (result.status === 200 && result.data.success) {
      logTestResult('R√©cup√©ration profil', true, 'Profil r√©cup√©r√© avec succ√®s');
      return true;
    } else {
      logTestResult('R√©cup√©ration profil', false, result.data.message || '√âchec r√©cup√©ration');
      return false;
    }
  } catch (error) {
    logTestResult('R√©cup√©ration profil', false, `Erreur: ${error.message}`);
    return false;
  }
}

/**
 * Test de mise √† jour du profil
 */
async function testUpdateProfile() {
  console.log('\n‚úèÔ∏è Test de mise √† jour du profil...');
  
  try {
    const options = createRequestOptions('PUT', '/auth/profile');
    const updateData = {
      first_name: 'TestUpdated',
      last_name: 'PatientUpdated',
      phone: '+33123456789',
      address: '123 Rue de Test, 75001 Paris'
    };

    const result = await makeRequest(options, updateData);
    
    if (result.status === 200 && result.data.success) {
      logTestResult('Mise √† jour profil', true, 'Profil mis √† jour avec succ√®s');
      return true;
    } else {
      logTestResult('Mise √† jour profil', false, result.data.message || '√âchec mise √† jour');
      return false;
    }
  } catch (error) {
    logTestResult('Mise √† jour profil', false, `Erreur: ${error.message}`);
    return false;
  }
}

/**
 * Test de changement de mot de passe
 */
async function testChangePassword() {
  console.log('\nüîí Test de changement de mot de passe...');
  
  try {
    const options = createRequestOptions('PUT', '/auth/change-password');
    const passwordData = {
      currentPassword: testConfig.password,
      newPassword: testConfig.newPassword
    };

    const result = await makeRequest(options, passwordData);
    
    if (result.status === 200 && result.data.success) {
      logTestResult('Changement mot de passe', true, 'Mot de passe chang√© avec succ√®s');
      // Mettre √† jour le mot de passe pour les tests suivants
      testConfig.password = testConfig.newPassword;
      return true;
    } else {
      logTestResult('Changement mot de passe', false, result.data.message || '√âchec changement');
      return false;
    }
  } catch (error) {
    logTestResult('Changement mot de passe', false, `Erreur: ${error.message}`);
    return false;
  }
}

// ============================================================================
// TESTS DES PARAM√àTRES DE NOTIFICATION
// ============================================================================

/**
 * Test de r√©cup√©ration des param√®tres de notification
 */
async function testGetNotificationSettings() {
  console.log('\nüîî Test de r√©cup√©ration des param√®tres de notification...');
  
  try {
    const options = createRequestOptions('GET', '/notifications/settings');
    const result = await makeRequest(options);
    
    if (result.status === 200 && result.data.success) {
      logTestResult('Param√®tres notification - R√©cup√©ration', true, 'Param√®tres r√©cup√©r√©s avec succ√®s');
      return true;
    } else {
      logTestResult('Param√®tres notification - R√©cup√©ration', false, result.data.message || '√âchec r√©cup√©ration');
      return false;
    }
  } catch (error) {
    logTestResult('Param√®tres notification - R√©cup√©ration', false, `Erreur: ${error.message}`);
    return false;
  }
}

/**
 * Test de mise √† jour des param√®tres de notification
 */
async function testUpdateNotificationSettings() {
  console.log('\nüîî Test de mise √† jour des param√®tres de notification...');
  
  try {
    const options = createRequestOptions('PUT', '/notifications/settings');
    const settingsData = {
      new_message_enabled: true,
      new_document_enabled: true,
      exam_status_enabled: false,
      in_app_enabled: true,
      email_enabled: false,
      push_enabled: true,
      email_frequency: 'daily',
      quiet_hours_start: '22:00',
      quiet_hours_end: '07:00'
    };

    const result = await makeRequest(options, settingsData);
    
    if (result.status === 200 && result.data.success) {
      logTestResult('Param√®tres notification - Mise √† jour', true, 'Param√®tres mis √† jour avec succ√®s');
      return true;
    } else {
      logTestResult('Param√®tres notification - Mise √† jour', false, result.data.message || '√âchec mise √† jour');
      return false;
    }
  } catch (error) {
    logTestResult('Param√®tres notification - Mise √† jour', false, `Erreur: ${error.message}`);
    return false;
  }
}

// ============================================================================
// TESTS DE GESTION DES DONN√âES
// ============================================================================

/**
 * Test d'export des donn√©es
 */
async function testDataExport() {
  console.log('\nüìÑ Test d\\'export des donn√©es...');
  
  try {
    const options = createRequestOptions('POST', '/auth/data-export');
    const result = await makeRequest(options);
    
    if (result.status === 200 && result.data.success) {
      logTestResult('Export des donn√©es', true, 'Export des donn√©es r√©ussi');
      return true;
    } else {
      logTestResult('Export des donn√©es', false, result.data.message || '√âchec export');
      return false;
    }
  } catch (error) {
    logTestResult('Export des donn√©es', false, `Erreur: ${error.message}`);
    return false;
  }
}

/**
 * Test de suppression de compte (sera le dernier test)
 */
async function testDeleteAccount() {
  console.log('\nüóëÔ∏è Test de suppression de compte...');
  
  try {
    const options = createRequestOptions('DELETE', '/auth/account');
    const result = await makeRequest(options);
    
    if (result.status === 200 && result.data.success) {
      logTestResult('Suppression compte', true, 'Compte supprim√© avec succ√®s');
      return true;
    } else {
      logTestResult('Suppression compte', false, result.data.message || '√âchec suppression');
      return false;
    }
  } catch (error) {
    logTestResult('Suppression compte', false, `Erreur: ${error.message}`);
    return false;
  }
}

// ============================================================================
// SCRIPT PRINCIPAL
// ============================================================================

async function runTests() {
  console.log('üß™ D√âBUT DES TESTS - GESTION DE COMPTE UTILISATEUR');
  console.log('=' + '='.repeat(60));
  
  let totalTests = 0;
  let passedTests = 0;

  // Liste des tests √† ex√©cuter
  const tests = [
    { name: 'Connexion', func: testLogin },
    { name: 'R√©cup√©ration profil', func: testGetProfile },
    { name: 'Mise √† jour profil', func: testUpdateProfile },
    { name: 'Changement mot de passe', func: testChangePassword },
    { name: 'Param√®tres notification - R√©cup√©ration', func: testGetNotificationSettings },
    { name: 'Param√®tres notification - Mise √† jour', func: testUpdateNotificationSettings },
    { name: 'Export des donn√©es', func: testDataExport }
    // Note: Le test de suppression de compte est comment√© pour √©viter de supprimer le compte de test
    // { name: 'Suppression compte', func: testDeleteAccount }
  ];

  for (const test of tests) {
    totalTests++;
    const success = await test.func();
    if (success) passedTests++;
    
    // Petite pause entre les tests
    await new Promise(resolve => setTimeout(resolve, 500));
  }

  // R√©sum√© final
  console.log('\n' + '='.repeat(60));
  console.log('üìä R√âSUM√â DES TESTS');
  console.log('=' + '='.repeat(60));
  console.log(`Total des tests: ${totalTests}`);
  console.log(`Tests r√©ussis: ${passedTests}`);
  console.log(`Tests √©chou√©s: ${totalTests - passedTests}`);
  console.log(`Taux de r√©ussite: ${Math.round((passedTests / totalTests) * 100)}%`);

  if (passedTests === totalTests) {
    console.log('\nüéâ TOUS LES TESTS SONT PASS√âS !');
    console.log('‚úÖ Les fonctionnalit√©s de gestion de compte sont op√©rationnelles.');
  } else {
    console.log('\n‚ö†Ô∏è  CERTAINS TESTS ONT √âCHOU√â');
    console.log('‚ùå V√©rifiez les erreurs ci-dessus et les configurations backend.');
  }

  console.log('\nüí° Pour utiliser les fonctionnalit√©s:');
  console.log('1. Assurez-vous que le backend est d√©marr√© (npm start)');
  console.log('2. Cr√©ez un compte patient pour tester');
  console.log('3. Utilisez les endpoints via l\\'interface frontend');
}

// Ex√©cuter les tests
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = { runTests };