// üß™ TEST DU NOUVEAU SYST√àME DE DOCUMENTS S√âCURIS√â
// üìÖ Cr√©√© le : 21 Ao√ªt 2025
// üéØ V√©rifier que les patients ne peuvent plus acc√©der aux documents hors ligne

const axios = require('axios');
const colors = require('colors');

const API_BASE = 'http://localhost:3000/api';
let authToken = '';
let testDocumentId = null;

// Configuration des couleurs
colors.setTheme({
  info: 'blue',
  success: 'green',
  warning: 'yellow',
  error: 'red',
  header: 'cyan'
});

function log(message, color = 'white') {
  console.log(message[color]);
}

function separator() {
  console.log('='.repeat(80).header);
}

// Fonction utilitaire pour attendre
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// Test 1: Connexion en tant que patient
async function testPatientLogin() {
  try {
    separator();
    log('üîê Test 1: Connexion patient', 'header');
    
    const response = await axios.post(`${API_BASE}/auth/login`, {
      email: 'patient1@example.com',
      password: 'password123'
    });

    if (response.data.success) {
      authToken = response.data.data.token;
      log('‚úÖ Connexion patient r√©ussie', 'success');
      log(`   Token re√ßu: ${authToken.substring(0, 20)}...`, 'info');
      return true;
    } else {
      log('‚ùå √âchec de la connexion patient', 'error');
      return false;
    }
    
  } catch (error) {
    log(`‚ùå Erreur connexion patient: ${error.response?.data?.message || error.message}`, 'error');
    return false;
  }
}

// Test 2: R√©cup√©rer les documents du patient
async function testGetPatientDocuments() {
  try {
    separator();
    log('üìã Test 2: R√©cup√©ration des documents patient', 'header');
    
    const response = await axios.get(`${API_BASE}/documents/my-documents`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });

    if (response.data.success && response.data.data.documents.length > 0) {
      testDocumentId = response.data.data.documents[0].id;
      log('‚úÖ Documents r√©cup√©r√©s avec succ√®s', 'success');
      log(`   Nombre de documents: ${response.data.data.documents.length}`, 'info');
      log(`   Premier document ID: ${testDocumentId}`, 'info');
      return true;
    } else {
      log('‚ö†Ô∏è  Aucun document trouv√©', 'warning');
      return false;
    }
    
  } catch (error) {
    log(`‚ùå Erreur r√©cup√©ration documents: ${error.response?.data?.message || error.message}`, 'error');
    return false;
  }
}

// Test 3: Tentative de visualisation en ligne (DOIT FONCTIONNER)
async function testOnlineDocumentView() {
  if (!testDocumentId) {
    log('‚ö†Ô∏è  Test 3: Pas de document pour la visualisation', 'warning');
    return false;
  }

  try {
    separator();
    log('üëÅÔ∏è  Test 3: Visualisation document en ligne', 'header');
    
    const response = await axios.get(`${API_BASE}/documents/${testDocumentId}/view`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      },
      responseType: 'stream'
    });

    if (response.status === 200) {
      log('‚úÖ Visualisation en ligne r√©ussie', 'success');
      log(`   Type de contenu: ${response.headers['content-type']}`, 'info');
      log(`   Headers de s√©curit√© pr√©sents: ${response.headers['cache-control'] ? 'Oui' : 'Non'}`, 'info');
      return true;
    } else {
      log('‚ùå √âchec de la visualisation en ligne', 'error');
      return false;
    }
    
  } catch (error) {
    log(`‚ùå Erreur visualisation en ligne: ${error.response?.data?.message || error.message}`, 'error');
    return false;
  }
}

// Test 4: Tentative de t√©l√©chargement (DOIT √äTRE BLOQU√â)
async function testDownloadBlocked() {
  if (!testDocumentId) {
    log('‚ö†Ô∏è  Test 4: Pas de document pour le t√©l√©chargement', 'warning');
    return false;
  }

  try {
    separator();
    log('üö´ Test 4: Tentative de t√©l√©chargement (doit √™tre bloqu√©)', 'header');
    
    const response = await axios.get(`${API_BASE}/documents/${testDocumentId}/view?download=true`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });

    // Si on arrive ici, c'est que le t√©l√©chargement n'a pas √©t√© bloqu√©
    log('‚ùå PROBL√àME: Le t√©l√©chargement n\'a pas √©t√© bloqu√©!', 'error');
    return false;
    
  } catch (error) {
    if (error.response?.status === 403) {
      log('‚úÖ T√©l√©chargement correctement bloqu√©', 'success');
      log(`   Message: ${error.response.data.message}`, 'info');
      return true;
    } else {
      log(`‚ùå Erreur inattendue: ${error.response?.data?.message || error.message}`, 'error');
      return false;
    }
  }
}

// Test 5: Tentative d'acc√®s aux donn√©es hors ligne (DOIT √äTRE BLOQU√â)
async function testOfflineDataBlocked() {
  if (!testDocumentId) {
    log('‚ö†Ô∏è  Test 5: Pas de document pour les donn√©es hors ligne', 'warning');
    return false;
  }

  try {
    separator();
    log('üì± Test 5: Tentative d\'acc√®s aux donn√©es hors ligne (doit √™tre bloqu√©)', 'header');
    
    const response = await axios.get(`${API_BASE}/documents/${testDocumentId}/offline-data`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });

    // Si on arrive ici, c'est que l'acc√®s n'a pas √©t√© bloqu√©
    log('‚ùå PROBL√àME: L\'acc√®s hors ligne n\'a pas √©t√© bloqu√©!', 'error');
    return false;
    
  } catch (error) {
    if (error.response?.status === 403) {
      log('‚úÖ Acc√®s hors ligne correctement bloqu√©', 'success');
      log(`   Message: ${error.response.data.message}`, 'info');
      log(`   Code d\'erreur: ${error.response.data.error_code}`, 'info');
      return true;
    } else {
      log(`‚ùå Erreur inattendue: ${error.response?.data?.message || error.message}`, 'error');
      return false;
    }
  }
}

// Test 6: V√©rification d'acc√®s en temps r√©el
async function testAccessVerification() {
  if (!testDocumentId) {
    log('‚ö†Ô∏è  Test 6: Pas de document pour la v√©rification d\'acc√®s', 'warning');
    return false;
  }

  try {
    separator();
    log('üîê Test 6: V√©rification d\'acc√®s en temps r√©el', 'header');
    
    const response = await axios.post(`${API_BASE}/documents/${testDocumentId}/verify-access`, {
      timestamp: new Date().toISOString()
    }, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });

    if (response.data.success && response.data.access_granted) {
      log('‚úÖ V√©rification d\'acc√®s r√©ussie', 'success');
      log(`   Acc√®s accord√©: ${response.data.access_granted}`, 'info');
      log(`   Session valide: ${response.data.session_valid}`, 'info');
      log(`   Expire dans: ${response.data.expires_in} secondes`, 'info');
      return true;
    } else {
      log('‚ùå V√©rification d\'acc√®s √©chou√©e', 'error');
      return false;
    }
    
  } catch (error) {
    log(`‚ùå Erreur v√©rification d\'acc√®s: ${error.response?.data?.message || error.message}`, 'error');
    return false;
  }
}

// Test complet du syst√®me s√©curis√©
async function runSecurityTests() {
  separator();
  log('üîí D√âBUT DES TESTS DE S√âCURIT√â DOCUMENTS', 'header');
  log('üìÖ Test effectu√© le: ' + new Date().toLocaleString(), 'info');
  separator();

  const results = {
    login: false,
    getDocuments: false,
    onlineView: false,
    downloadBlocked: false,
    offlineBlocked: false,
    accessVerification: false
  };

  // Ex√©cuter tous les tests
  results.login = await testPatientLogin();
  await sleep(1000);

  if (results.login) {
    results.getDocuments = await testGetPatientDocuments();
    await sleep(1000);

    if (results.getDocuments) {
      results.onlineView = await testOnlineDocumentView();
      await sleep(1000);

      results.downloadBlocked = await testDownloadBlocked();
      await sleep(1000);

      results.offlineBlocked = await testOfflineDataBlocked();
      await sleep(1000);

      results.accessVerification = await testAccessVerification();
    }
  }

  // R√©sum√© des r√©sultats
  separator();
  log('üìä R√âSUM√â DES TESTS DE S√âCURIT√â', 'header');
  separator();

  log(`üîê Connexion patient:           ${results.login ? '‚úÖ PASS' : '‚ùå FAIL'}`, results.login ? 'success' : 'error');
  log(`üìã R√©cup√©ration documents:      ${results.getDocuments ? '‚úÖ PASS' : '‚ùå FAIL'}`, results.getDocuments ? 'success' : 'error');
  log(`üëÅÔ∏è  Visualisation en ligne:      ${results.onlineView ? '‚úÖ PASS' : '‚ùå FAIL'}`, results.onlineView ? 'success' : 'error');
  log(`üö´ T√©l√©chargement bloqu√©:       ${results.downloadBlocked ? '‚úÖ PASS' : '‚ùå FAIL'}`, results.downloadBlocked ? 'success' : 'error');
  log(`üì± Acc√®s hors ligne bloqu√©:     ${results.offlineBlocked ? '‚úÖ PASS' : '‚ùå FAIL'}`, results.offlineBlocked ? 'success' : 'error');
  log(`üîê V√©rification d\'acc√®s:        ${results.accessVerification ? '‚úÖ PASS' : '‚ùå FAIL'}`, results.accessVerification ? 'success' : 'error');

  separator();

  const passedTests = Object.values(results).filter(result => result).length;
  const totalTests = Object.keys(results).length;

  if (passedTests === totalTests) {
    log(`üéâ TOUS LES TESTS R√âUSSIS (${passedTests}/${totalTests})`, 'success');
    log('üîí Le syst√®me de s√©curit√© fonctionne correctement!', 'success');
  } else {
    log(`‚ö†Ô∏è  TESTS PARTIELLEMENT R√âUSSIS (${passedTests}/${totalTests})`, 'warning');
    log('üîß Certains aspects de la s√©curit√© n√©cessitent des corrections.', 'warning');
  }

  separator();
}

// Ex√©cution des tests si le fichier est appel√© directement
if (require.main === module) {
  runSecurityTests().catch(error => {
    console.error('Erreur lors de l\'ex√©cution des tests:', error);
    process.exit(1);
  });
}

module.exports = {
  runSecurityTests
};