// üß™ SCRIPT DE TEST SYST√àME D'ADMINISTRATION MVP
// üìÖ Cr√©√© le : 11 Ao√ªt 2025
// üéØ Test complet des fonctionnalit√©s d'administration

const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';

// Configuration des utilisateurs de test
const TEST_USERS = {
  superAdmin: {
    email: 'super@admin.com',
    password: 'superadmin123',
    token: null
  },
  hospitalAdmin: {
    email: 'admin@hopital.com',
    password: 'hospitaladmin123',
    token: null,
    hospital_id: null
  },
  labAdmin: {
    email: 'admin@labo.com',
    password: 'labadmin123',
    token: null,
    laboratory_id: null
  }
};

// Donn√©es de test
let testHospitalId = null;
let testLaboratoryId = null;
let testPatientId = null;
let testStaffId = null;

// ============================================================================
// FONCTIONS UTILITAIRES
// ============================================================================

function log(message, type = 'info') {
  const timestamp = new Date().toLocaleTimeString('fr-FR');
  const colors = {
    info: '\x1b[36m',    // Cyan
    success: '\x1b[32m', // Vert
    error: '\x1b[31m',   // Rouge
    warning: '\x1b[33m', // Jaune
    reset: '\x1b[0m'     // Reset
  };
  
  console.log(`${colors[type]}[${timestamp}] ${message}${colors.reset}`);
}

async function makeRequest(method, endpoint, data = null, token = null) {
  try {
    const config = {
      method,
      url: `${BASE_URL}${endpoint}`,
      headers: {}
    };

    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }

    if (data) {
      config.data = data;
      config.headers['Content-Type'] = 'application/json';
    }

    const response = await axios(config);
    return { success: true, data: response.data };
  } catch (error) {
    return {
      success: false,
      error: error.response?.data || error.message,
      status: error.response?.status
    };
  }
}

// ============================================================================
// TESTS D'AUTHENTIFICATION
// ============================================================================

async function testAuthentication() {
  log('üîê Test d\'authentification des admins', 'info');

  // Test connexion Super Admin
  log('Connexion Super Admin...', 'info');
  const superAdminLogin = await makeRequest('POST', '/auth/login', {
    email: TEST_USERS.superAdmin.email,
    password: TEST_USERS.superAdmin.password
  });

  if (superAdminLogin.success) {
    TEST_USERS.superAdmin.token = superAdminLogin.data.data.token;
    log('‚úÖ Super Admin connect√©', 'success');
  } else {
    log('‚ùå √âchec connexion Super Admin', 'error');
    return false;
  }

  // Test connexion Admin H√¥pital
  log('Connexion Admin H√¥pital...', 'info');
  const hospitalAdminLogin = await makeRequest('POST', '/auth/login', {
    email: TEST_USERS.hospitalAdmin.email,
    password: TEST_USERS.hospitalAdmin.password
  });

  if (hospitalAdminLogin.success) {
    TEST_USERS.hospitalAdmin.token = hospitalAdminLogin.data.data.token;
    TEST_USERS.hospitalAdmin.hospital_id = hospitalAdminLogin.data.data.user.hospital_id;
    log('‚úÖ Admin H√¥pital connect√©', 'success');
  } else {
    log('‚ùå √âchec connexion Admin H√¥pital', 'error');
  }

  // Test connexion Admin Laboratoire
  log('Connexion Admin Laboratoire...', 'info');
  const labAdminLogin = await makeRequest('POST', '/auth/login', {
    email: TEST_USERS.labAdmin.email,
    password: TEST_USERS.labAdmin.password
  });

  if (labAdminLogin.success) {
    TEST_USERS.labAdmin.token = labAdminLogin.data.data.token;
    TEST_USERS.labAdmin.laboratory_id = labAdminLogin.data.data.user.laboratory_id;
    log('‚úÖ Admin Laboratoire connect√©', 'success');
  } else {
    log('‚ùå √âchec connexion Admin Laboratoire', 'error');
  }

  return true;
}

// ============================================================================
// TESTS GESTION DES √âTABLISSEMENTS
// ============================================================================

async function testEstablishmentManagement() {
  log('üè• Test gestion des √©tablissements', 'info');

  // Test cr√©ation h√¥pital (Super Admin seulement)
  log('Cr√©ation d\'un h√¥pital...', 'info');
  const hospitalData = {
    name: 'H√¥pital Test MVP',
    address: '123 Rue de la Sant√©',
    city: 'Paris',
    phone: '0123456789',
    email: 'contact@hopital-test.fr',
    latitude: 48.8566,
    longitude: 2.3522
  };

  const createHospital = await makeRequest('POST', '/admin/hospitals', hospitalData, TEST_USERS.superAdmin.token);
  
  if (createHospital.success) {
    testHospitalId = createHospital.data.data.hospital.id;
    log(`‚úÖ H√¥pital cr√©√© avec ID: ${testHospitalId}`, 'success');
  } else {
    log('‚ùå √âchec cr√©ation h√¥pital', 'error');
    console.log(createHospital.error);
  }

  // Test cr√©ation laboratoire (Super Admin seulement)
  log('Cr√©ation d\'un laboratoire...', 'info');
  const laboratoryData = {
    name: 'Laboratoire Test MVP',
    address: '456 Avenue des Analyses',
    city: 'Lyon',
    phone: '0123456790',
    email: 'contact@labo-test.fr',
    latitude: 45.7640,
    longitude: 4.8357
  };

  const createLaboratory = await makeRequest('POST', '/admin/laboratories', laboratoryData, TEST_USERS.superAdmin.token);
  
  if (createLaboratory.success) {
    testLaboratoryId = createLaboratory.data.data.laboratory.id;
    log(`‚úÖ Laboratoire cr√©√© avec ID: ${testLaboratoryId}`, 'success');
  } else {
    log('‚ùå √âchec cr√©ation laboratoire', 'error');
    console.log(createLaboratory.error);
  }

  // Test liste des h√¥pitaux
  log('R√©cup√©ration liste des h√¥pitaux...', 'info');
  const getHospitals = await makeRequest('GET', '/admin/hospitals?page=1&limit=5', null, TEST_USERS.superAdmin.token);
  
  if (getHospitals.success) {
    log(`‚úÖ ${getHospitals.data.data.hospitals.length} h√¥pitaux r√©cup√©r√©s`, 'success');
  } else {
    log('‚ùå √âchec r√©cup√©ration h√¥pitaux', 'error');
  }

  // Test liste des laboratoires
  log('R√©cup√©ration liste des laboratoires...', 'info');
  const getLaboratories = await makeRequest('GET', '/admin/laboratories?page=1&limit=5', null, TEST_USERS.superAdmin.token);
  
  if (getLaboratories.success) {
    log(`‚úÖ ${getLaboratories.data.data.laboratories.length} laboratoires r√©cup√©r√©s`, 'success');
  } else {
    log('‚ùå √âchec r√©cup√©ration laboratoires', 'error');
  }

  return true;
}

// ============================================================================
// TESTS GESTION DES UTILISATEURS
// ============================================================================

async function testUserManagement() {
  log('üë• Test gestion des utilisateurs', 'info');

  // Test cr√©ation utilisateur par Super Admin
  log('Cr√©ation d\'un staff hospitalier...', 'info');
  const staffData = {
    email: 'staff@hopital-test.fr',
    password: 'stafftest123',
    first_name: 'Jean',
    last_name: 'Dupont',
    phone: '0123456791',
    role: 'hospital_staff',
    hospital_id: testHospitalId
  };

  const createStaff = await makeRequest('POST', '/admin/users', staffData, TEST_USERS.superAdmin.token);
  
  if (createStaff.success) {
    testStaffId = createStaff.data.data.user.id;
    log(`‚úÖ Staff cr√©√© avec ID: ${testStaffId}`, 'success');
  } else {
    log('‚ùå √âchec cr√©ation staff', 'error');
    console.log(createStaff.error);
  }

  // Test liste des utilisateurs
  log('R√©cup√©ration liste des utilisateurs...', 'info');
  const getUsers = await makeRequest('GET', '/admin/users?page=1&limit=10', null, TEST_USERS.superAdmin.token);
  
  if (getUsers.success) {
    log(`‚úÖ ${getUsers.data.data.users.length} utilisateurs r√©cup√©r√©s`, 'success');
  } else {
    log('‚ùå √âchec r√©cup√©ration utilisateurs', 'error');
  }

  // Test modification utilisateur
  if (testStaffId) {
    log('Modification du staff...', 'info');
    const updateData = {
      first_name: 'Jean-Michel',
      is_active: true
    };

    const updateStaff = await makeRequest('PUT', `/admin/users/${testStaffId}`, updateData, TEST_USERS.superAdmin.token);
    
    if (updateStaff.success) {
      log('‚úÖ Staff modifi√© avec succ√®s', 'success');
    } else {
      log('‚ùå √âchec modification staff', 'error');
    }
  }

  return true;
}

// ============================================================================
// TESTS GESTION DES PATIENTS
// ============================================================================

async function testPatientManagement() {
  log('üè• Test gestion des patients', 'info');

  // Test cr√©ation patient par Super Admin
  log('Cr√©ation d\'un patient...', 'info');
  const patientData = {
    email: 'patient@test.fr',
    password: 'patient123',
    first_name: 'Marie',
    last_name: 'Martin',
    phone: '0123456792',
    date_of_birth: '1990-05-15',
    gender: 'F',
    assign_to_hospital: testHospitalId
  };

  const createPatient = await makeRequest('POST', '/admin/patients', patientData, TEST_USERS.superAdmin.token);
  
  if (createPatient.success) {
    testPatientId = createPatient.data.data.patient.id;
    log(`‚úÖ Patient cr√©√© avec ID: ${testPatientId}`, 'success');
  } else {
    log('‚ùå √âchec cr√©ation patient', 'error');
    console.log(createPatient.error);
  }

  // Test liste des patients
  log('R√©cup√©ration liste des patients...', 'info');
  const getPatients = await makeRequest('GET', '/admin/patients?page=1&limit=10', null, TEST_USERS.superAdmin.token);
  
  if (getPatients.success) {
    log(`‚úÖ ${getPatients.data.data.patients.length} patients r√©cup√©r√©s`, 'success');
  } else {
    log('‚ùå √âchec r√©cup√©ration patients', 'error');
  }

  // Test statistiques patients
  log('R√©cup√©ration statistiques patients...', 'info');
  const getPatientsStats = await makeRequest('GET', '/admin/patients/stats', null, TEST_USERS.superAdmin.token);
  
  if (getPatientsStats.success) {
    log(`‚úÖ Statistiques: ${getPatientsStats.data.data.total} patients total`, 'success');
  } else {
    log('‚ùå √âchec r√©cup√©ration statistiques', 'error');
  }

  return true;
}

// ============================================================================
// TESTS PERMISSIONS
// ============================================================================

async function testPermissions() {
  log('üîí Test des permissions', 'info');

  // Test: Admin h√¥pital ne peut pas cr√©er d'h√¥pital
  if (TEST_USERS.hospitalAdmin.token) {
    log('Test: Admin h√¥pital tente de cr√©er un h√¥pital...', 'info');
    const forbiddenHospital = await makeRequest('POST', '/admin/hospitals', {
      name: 'H√¥pital Interdit',
      address: 'Rue Interdite',
      city: 'Ville Interdite'
    }, TEST_USERS.hospitalAdmin.token);

    if (!forbiddenHospital.success && forbiddenHospital.status === 403) {
      log('‚úÖ Permission correctement refus√©e', 'success');
    } else {
      log('‚ùå Permission incorrectement accord√©e', 'error');
    }
  }

  // Test: Admin labo ne peut pas voir les patients d'un h√¥pital
  if (TEST_USERS.labAdmin.token && testPatientId) {
    log('Test: Admin labo tente d\'acc√©der √† un patient d\'h√¥pital...', 'info');
    const forbiddenPatient = await makeRequest('GET', `/admin/patients/${testPatientId}`, null, TEST_USERS.labAdmin.token);

    if (!forbiddenPatient.success && forbiddenPatient.status === 403) {
      log('‚úÖ Acc√®s correctement refus√©', 'success');
    } else {
      log('‚ùå Acc√®s incorrectement accord√©', 'error');
    }
  }

  return true;
}

// ============================================================================
// TESTS TABLEAU DE BORD
// ============================================================================

async function testDashboard() {
  log('üìä Test tableau de bord', 'info');

  // Test tableau de bord Super Admin
  log('R√©cup√©ration tableau de bord Super Admin...', 'info');
  const superAdminDashboard = await makeRequest('GET', '/admin/dashboard', null, TEST_USERS.superAdmin.token);
  
  if (superAdminDashboard.success) {
    const stats = superAdminDashboard.data.data;
    log(`‚úÖ Dashboard Super Admin: ${stats.users.total} utilisateurs, ${stats.establishments.hospitals.total} h√¥pitaux`, 'success');
  } else {
    log('‚ùå √âchec r√©cup√©ration dashboard Super Admin', 'error');
  }

  // Test tableau de bord Admin H√¥pital
  if (TEST_USERS.hospitalAdmin.token) {
    log('R√©cup√©ration tableau de bord Admin H√¥pital...', 'info');
    const hospitalAdminDashboard = await makeRequest('GET', '/admin/dashboard', null, TEST_USERS.hospitalAdmin.token);
    
    if (hospitalAdminDashboard.success) {
      const stats = hospitalAdminDashboard.data.data;
      log(`‚úÖ Dashboard Admin H√¥pital: ${stats.staff.total} staff, ${stats.documents.total} documents`, 'success');
    } else {
      log('‚ùå √âchec r√©cup√©ration dashboard Admin H√¥pital', 'error');
    }
  }

  return true;
}

// ============================================================================
// FONCTION PRINCIPALE DE TEST
// ============================================================================

async function runAllTests() {
  console.log('üß™ ================================');
  console.log('üè• TESTS SYST√àME D\'ADMINISTRATION');
  console.log('üß™ ================================\n');

  try {
    // Test de sant√© de l'API
    log('üîç V√©rification de l\'API...', 'info');
    const healthCheck = await makeRequest('GET', '/health');
    
    if (!healthCheck.success) {
      log('‚ùå API non disponible', 'error');
      return;
    }
    
    log('‚úÖ API op√©rationnelle', 'success');

    // Ex√©cution des tests
    await testAuthentication();
    await testEstablishmentManagement();
    await testUserManagement();
    await testPatientManagement();
    await testPermissions();
    await testDashboard();

    console.log('\nüß™ ================================');
    log('‚úÖ TOUS LES TESTS TERMIN√âS', 'success');
    console.log('üß™ ================================');

    // R√©sum√© des donn√©es cr√©√©es
    console.log('\nüìã DONN√âES DE TEST CR√â√âES:');
    if (testHospitalId) log(`üè• H√¥pital ID: ${testHospitalId}`, 'info');
    if (testLaboratoryId) log(`üß™ Laboratoire ID: ${testLaboratoryId}`, 'info');
    if (testStaffId) log(`üë®‚Äç‚öïÔ∏è Staff ID: ${testStaffId}`, 'info');
    if (testPatientId) log(`ü§í Patient ID: ${testPatientId}`, 'info');

  } catch (error) {
    log(`‚ùå Erreur lors des tests: ${error.message}`, 'error');
    console.error(error);
  }
}

// ============================================================================
// EX√âCUTION
// ============================================================================

if (require.main === module) {
  runAllTests().catch(console.error);
}

module.exports = {
  runAllTests,
  testAuthentication,
  testEstablishmentManagement,
  testUserManagement,
  testPatientManagement,
  testPermissions,
  testDashboard
};