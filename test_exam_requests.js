// üß™ TEST RAPIDE - DEMANDES D'EXAMENS DE LABORATOIRE
// üìÖ Cr√©√© le : 11 Ao√ªt 2025
// üéØ Tester la nouvelle fonctionnalit√© de demandes d'examens

const axios = require('axios');

const API_BASE = 'http://localhost:3000/api';

// Comptes de test
const testAccounts = {
  doctor: { email: 'dr.bernard@chu-paris.fr', password: 'staff123' },
  labStaff: { email: 'tech.dupont@cerba.fr', password: 'staff123' },
  patient: { email: 'jean.dupont@email.fr', password: 'patient123' }
};

async function testExamRequests() {
  console.log('üß™ Test de la fonctionnalit√© Demandes d\'Examens...\n');

  try {
    // 1. Test de sant√© de l'API
    console.log('1Ô∏è‚É£ Test de sant√© de l\'API...');
    const healthResponse = await axios.get(`${API_BASE}/health`);
    console.log(`   ‚úÖ API op√©rationnelle: ${healthResponse.data.message}`);

    // 2. Connexion M√©decin
    console.log('\n2Ô∏è‚É£ Connexion M√©decin...');
    const doctorLogin = await axios.post(`${API_BASE}/auth/login`, testAccounts.doctor);
    const doctorToken = doctorLogin.data.data.token;
    console.log(`   ‚úÖ Connexion m√©decin r√©ussie: ${doctorLogin.data.data.user.first_name} ${doctorLogin.data.data.user.last_name}`);

    // 3. Connexion Personnel Laboratoire
    console.log('\n3Ô∏è‚É£ Connexion Personnel Laboratoire...');
    const labLogin = await axios.post(`${API_BASE}/auth/login`, testAccounts.labStaff);
    const labToken = labLogin.data.data.token;
    console.log(`   ‚úÖ Connexion labo r√©ussie: ${labLogin.data.data.user.first_name} ${labLogin.data.data.user.last_name}`);

    // 4. Test statistiques (M√©decin)
    console.log('\n4Ô∏è‚É£ Test statistiques demandes d\'examens (M√©decin)...');
    const doctorStats = await axios.get(`${API_BASE}/exam-requests/stats`, {
      headers: { Authorization: `Bearer ${doctorToken}` }
    });
    console.log(`   ‚úÖ Statistiques m√©decin:`, doctorStats.data.data);

    // 5. Test statistiques (Personnel Labo)
    console.log('\n5Ô∏è‚É£ Test statistiques demandes d\'examens (Personnel Labo)...');
    const labStats = await axios.get(`${API_BASE}/exam-requests/stats`, {
      headers: { Authorization: `Bearer ${labToken}` }
    });
    console.log(`   ‚úÖ Statistiques labo:`, labStats.data.data);

    // 6. Liste des demandes (M√©decin)
    console.log('\n6Ô∏è‚É£ Liste des demandes d\'examens (M√©decin)...');
    const doctorRequests = await axios.get(`${API_BASE}/exam-requests`, {
      headers: { Authorization: `Bearer ${doctorToken}` }
    });
    console.log(`   ‚úÖ ${doctorRequests.data.data.examRequests.length} demandes trouv√©es pour le m√©decin`);

    // 7. Liste des demandes (Personnel Labo)
    console.log('\n7Ô∏è‚É£ Liste des demandes d\'examens (Personnel Labo)...');
    const labRequests = await axios.get(`${API_BASE}/exam-requests`, {
      headers: { Authorization: `Bearer ${labToken}` }
    });
    console.log(`   ‚úÖ ${labRequests.data.data.examRequests.length} demandes trouv√©es pour le laboratoire`);

    // 8. Cr√©er une nouvelle demande d'examen (M√©decin)
    console.log('\n8Ô∏è‚É£ Cr√©ation d\'une nouvelle demande d\'examen...');
    const newExamRequest = await axios.post(`${API_BASE}/exam-requests`, {
      patient_id: 1,
      laboratory_id: 1,
      exam_type: 'blood_test',
      priority: 'high',
      clinical_info: 'Patient pr√©sente des sympt√¥mes de fatigue chronique. Suspicion d\'an√©mie. Demande bilan h√©matologique pour diagnostic.',
      requested_tests: [
        'H√©mogramme complet',
        'Fer s√©rique',
        'Ferritine',
        'Vitamine B12'
      ],
      notes: 'Patient anxieux, pr√©voir prise de sang en douceur'
    }, {
      headers: { Authorization: `Bearer ${doctorToken}` }
    });
    console.log(`   ‚úÖ Demande cr√©√©e avec succ√®s: ID ${newExamRequest.data.data.examRequest.id}`);
    const newRequestId = newExamRequest.data.data.examRequest.id;

    // 9. Consulter la demande cr√©√©e
    console.log('\n9Ô∏è‚É£ Consultation de la demande cr√©√©e...');
    const requestDetails = await axios.get(`${API_BASE}/exam-requests/${newRequestId}`, {
      headers: { Authorization: `Bearer ${doctorToken}` }
    });
    console.log(`   ‚úÖ D√©tails r√©cup√©r√©s: ${requestDetails.data.data.examRequest.exam_type} - ${requestDetails.data.data.examRequest.status}`);

    // 10. Mettre √† jour le statut (Personnel Labo)
    console.log('\nüîü Mise √† jour du statut par le laboratoire...');
    const statusUpdate = await axios.put(`${API_BASE}/exam-requests/${newRequestId}/status`, {
      status: 'accepted',
      notes: 'Demande accept√©e. Programmation pr√©vue pour demain matin.',
      scheduled_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
    }, {
      headers: { Authorization: `Bearer ${labToken}` }
    });
    console.log(`   ‚úÖ Statut mis √† jour: ${statusUpdate.data.data.examRequest.status}`);

    // 11. Consulter l'historique
    console.log('\n1Ô∏è‚É£1Ô∏è‚É£ Consultation de l\'historique...');
    const history = await axios.get(`${API_BASE}/exam-requests/${newRequestId}/history`, {
      headers: { Authorization: `Bearer ${doctorToken}` }
    });
    console.log(`   ‚úÖ ${history.data.data.history.length} entr√©es dans l\'historique`);

    // 12. Test demandes urgentes
    console.log('\n1Ô∏è‚É£2Ô∏è‚É£ Test des demandes urgentes...');
    const urgentRequests = await axios.get(`${API_BASE}/exam-requests/urgent`, {
      headers: { Authorization: `Bearer ${labToken}` }
    });
    console.log(`   ‚úÖ ${urgentRequests.data.data.examRequests.length} demandes urgentes trouv√©es`);

    // 13. Test acc√®s interdit (Patient)
    console.log('\n1Ô∏è‚É£3Ô∏è‚É£ Test acc√®s interdit (Patient)...');
    const patientLogin = await axios.post(`${API_BASE}/auth/login`, testAccounts.patient);
    const patientToken = patientLogin.data.data.token;
    
    try {
      await axios.get(`${API_BASE}/exam-requests/stats`, {
        headers: { Authorization: `Bearer ${patientToken}` }
      });
      console.log('   ‚ùå ERREUR: Le patient ne devrait pas avoir acc√®s !');
    } catch (error) {
      if (error.response?.status === 403) {
        console.log('   ‚úÖ Acc√®s correctement refus√© au patient (403)');
      } else {
        console.log(`   ‚ö†Ô∏è Erreur inattendue: ${error.response?.status}`);
      }
    }

    console.log('\n‚úÖ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS !');
    console.log('\nüìã R√âSUM√â DES FONCTIONNALIT√âS TEST√âES :');
    console.log('   ‚úÖ Statistiques par r√¥le');
    console.log('   ‚úÖ Liste des demandes filtr√©es');
    console.log('   ‚úÖ Cr√©ation de demandes (m√©decin)');
    console.log('   ‚úÖ Consultation des d√©tails');
    console.log('   ‚úÖ Mise √† jour des statuts (labo)');
    console.log('   ‚úÖ Historique des changements');
    console.log('   ‚úÖ Demandes urgentes');
    console.log('   ‚úÖ Contr√¥le d\'acc√®s (patient refus√©)');

    console.log('\nüöÄ LA NOUVELLE FONCTIONNALIT√â EST OP√âRATIONNELLE !');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.response?.data || error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° SOLUTION: D√©marrez d\'abord le serveur avec:');
      console.log('   cd backend/src');
      console.log('   node app.js');
    }
  }
}

// V√©rifier si le serveur est d√©marr√©
console.log('üîç Test de la nouvelle fonctionnalit√© Demandes d\'Examens...');
console.log('üí° Assurez-vous que le serveur tourne sur http://localhost:3000\n');

testExamRequests();