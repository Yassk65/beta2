// üåç SCRIPT DE G√âOCODAGE DES √âTABLISSEMENTS
// üìÖ Cr√©√© le : 16 Ao√ªt 2025
// üéØ Ajouter les coordonn√©es GPS aux √©tablissements existants

const { PrismaClient } = require('@prisma/client');
const geocodingService = require('./src/services/geocodingService');

const prisma = new PrismaClient();

async function geocodeEstablishments() {
  try {
    console.log('üåç D√©but du g√©ocodage des √©tablissements...');

    // R√©cup√©rer les h√¥pitaux sans coordonn√©es
    const hospitalsWithoutCoords = await prisma.hospital.findMany({
      where: {
        OR: [
          { latitude: null },
          { longitude: null }
        ]
      }
    });

    console.log(`üè• ${hospitalsWithoutCoords.length} h√¥pitaux √† g√©ocoder`);

    // G√©ocoder les h√¥pitaux
    for (const hospital of hospitalsWithoutCoords) {
      console.log(`\nüîç G√©ocodage: ${hospital.name}`);
      
      const coordinates = await geocodingService.getCoordinates(hospital.address, hospital.city);
      
      if (coordinates) {
        await prisma.hospital.update({
          where: { id: hospital.id },
          data: {
            latitude: coordinates.latitude,
            longitude: coordinates.longitude
          }
        });
        console.log(`‚úÖ ${hospital.name} mis √† jour`);
      } else {
        console.log(`‚ùå Impossible de g√©ocoder: ${hospital.name}`);
      }
      
      // Pause entre les requ√™tes
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    // R√©cup√©rer les laboratoires sans coordonn√©es
    const laboratoriesWithoutCoords = await prisma.laboratory.findMany({
      where: {
        OR: [
          { latitude: null },
          { longitude: null }
        ]
      }
    });

    console.log(`\nüß™ ${laboratoriesWithoutCoords.length} laboratoires √† g√©ocoder`);

    // G√©ocoder les laboratoires
    for (const laboratory of laboratoriesWithoutCoords) {
      console.log(`\nüîç G√©ocodage: ${laboratory.name}`);
      
      const coordinates = await geocodingService.getCoordinates(laboratory.address, laboratory.city);
      
      if (coordinates) {
        await prisma.laboratory.update({
          where: { id: laboratory.id },
          data: {
            latitude: coordinates.latitude,
            longitude: coordinates.longitude
          }
        });
        console.log(`‚úÖ ${laboratory.name} mis √† jour`);
      } else {
        console.log(`‚ùå Impossible de g√©ocoder: ${laboratory.name}`);
      }
      
      // Pause entre les requ√™tes
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    // Statistiques finales
    const hospitalsWithCoords = await prisma.hospital.count({
      where: {
        AND: [
          { latitude: { not: null } },
          { longitude: { not: null } }
        ]
      }
    });

    const laboratoriesWithCoords = await prisma.laboratory.count({
      where: {
        AND: [
          { latitude: { not: null } },
          { longitude: { not: null } }
        ]
      }
    });

    console.log('\nüéâ G√©ocodage termin√© !');
    console.log(`üìä ${hospitalsWithCoords} h√¥pitaux avec coordonn√©es`);
    console.log(`üìä ${laboratoriesWithCoords} laboratoires avec coordonn√©es`);
    console.log(`üìä Total: ${hospitalsWithCoords + laboratoriesWithCoords} √©tablissements g√©olocalis√©s`);

  } catch (error) {
    console.error('‚ùå Erreur lors du g√©ocodage:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  geocodeEstablishments()
    .then(() => {
      console.log('‚úÖ Script termin√© avec succ√®s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erreur fatale:', error);
      process.exit(1);
    });
}

module.exports = { geocodeEstablishments };